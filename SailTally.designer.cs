#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SailTally
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SailTally_Club")]
	public partial class SailTallyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSS_ThrowoutDetail(SS_ThrowoutDetail instance);
    partial void UpdateSS_ThrowoutDetail(SS_ThrowoutDetail instance);
    partial void DeleteSS_ThrowoutDetail(SS_ThrowoutDetail instance);
    partial void InsertSS_BoatOwner(SS_BoatOwner instance);
    partial void UpdateSS_BoatOwner(SS_BoatOwner instance);
    partial void DeleteSS_BoatOwner(SS_BoatOwner instance);
    partial void InsertSS_Prize(SS_Prize instance);
    partial void UpdateSS_Prize(SS_Prize instance);
    partial void DeleteSS_Prize(SS_Prize instance);
    partial void InsertSS_PrizeDetail(SS_PrizeDetail instance);
    partial void UpdateSS_PrizeDetail(SS_PrizeDetail instance);
    partial void DeleteSS_PrizeDetail(SS_PrizeDetail instance);
    partial void InsertSS_Registration(SS_Registration instance);
    partial void UpdateSS_Registration(SS_Registration instance);
    partial void DeleteSS_Registration(SS_Registration instance);
    partial void InsertSS_ScoreMethodDetail(SS_ScoreMethodDetail instance);
    partial void UpdateSS_ScoreMethodDetail(SS_ScoreMethodDetail instance);
    partial void DeleteSS_ScoreMethodDetail(SS_ScoreMethodDetail instance);
    partial void InsertSS_Sery(SS_Sery instance);
    partial void UpdateSS_Sery(SS_Sery instance);
    partial void DeleteSS_Sery(SS_Sery instance);
    partial void InsertSS_Throwout(SS_Throwout instance);
    partial void UpdateSS_Throwout(SS_Throwout instance);
    partial void DeleteSS_Throwout(SS_Throwout instance);
    partial void InsertSS_ScoreMethod(SS_ScoreMethod instance);
    partial void UpdateSS_ScoreMethod(SS_ScoreMethod instance);
    partial void DeleteSS_ScoreMethod(SS_ScoreMethod instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void InsertSS_Log(SS_Log instance);
    partial void UpdateSS_Log(SS_Log instance);
    partial void DeleteSS_Log(SS_Log instance);
    partial void InsertSS_RaceFleet(SS_RaceFleet instance);
    partial void UpdateSS_RaceFleet(SS_RaceFleet instance);
    partial void DeleteSS_RaceFleet(SS_RaceFleet instance);
    partial void InsertSS_Score(SS_Score instance);
    partial void UpdateSS_Score(SS_Score instance);
    partial void DeleteSS_Score(SS_Score instance);
    partial void InsertSS_FleetSery(SS_FleetSery instance);
    partial void UpdateSS_FleetSery(SS_FleetSery instance);
    partial void DeleteSS_FleetSery(SS_FleetSery instance);
    partial void InsertSS_Fleet(SS_Fleet instance);
    partial void UpdateSS_Fleet(SS_Fleet instance);
    partial void DeleteSS_Fleet(SS_Fleet instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertSS_Boat(SS_Boat instance);
    partial void UpdateSS_Boat(SS_Boat instance);
    partial void DeleteSS_Boat(SS_Boat instance);
    partial void InsertSS_User(SS_User instance);
    partial void UpdateSS_User(SS_User instance);
    partial void DeleteSS_User(SS_User instance);
    partial void InsertSS_UserRole(SS_UserRole instance);
    partial void UpdateSS_UserRole(SS_UserRole instance);
    partial void DeleteSS_UserRole(SS_UserRole instance);
    partial void InsertSS_Role(SS_Role instance);
    partial void UpdateSS_Role(SS_Role instance);
    partial void DeleteSS_Role(SS_Role instance);
    partial void InsertSS_Result(SS_Result instance);
    partial void UpdateSS_Result(SS_Result instance);
    partial void DeleteSS_Result(SS_Result instance);
    partial void InsertSS_Penalty(SS_Penalty instance);
    partial void UpdateSS_Penalty(SS_Penalty instance);
    partial void DeleteSS_Penalty(SS_Penalty instance);
    partial void InsertSS_ResultSummary(SS_ResultSummary instance);
    partial void UpdateSS_ResultSummary(SS_ResultSummary instance);
    partial void DeleteSS_ResultSummary(SS_ResultSummary instance);
    partial void InsertSS_Trophy(SS_Trophy instance);
    partial void UpdateSS_Trophy(SS_Trophy instance);
    partial void DeleteSS_Trophy(SS_Trophy instance);
    partial void InsertSS_Time(SS_Time instance);
    partial void UpdateSS_Time(SS_Time instance);
    partial void DeleteSS_Time(SS_Time instance);
    partial void InsertSS_Season(SS_Season instance);
    partial void UpdateSS_Season(SS_Season instance);
    partial void DeleteSS_Season(SS_Season instance);
    partial void InsertSS_RaceSery(SS_RaceSery instance);
    partial void UpdateSS_RaceSery(SS_RaceSery instance);
    partial void DeleteSS_RaceSery(SS_RaceSery instance);
    partial void InsertSS_Race(SS_Race instance);
    partial void UpdateSS_Race(SS_Race instance);
    partial void DeleteSS_Race(SS_Race instance);
    #endregion
		
		public SailTallyDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SailTallyConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SailTallyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SailTallyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SailTallyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SailTallyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SS_ThrowoutDetail> SS_ThrowoutDetails
		{
			get
			{
				return this.GetTable<SS_ThrowoutDetail>();
			}
		}
		
		public System.Data.Linq.Table<SS_BoatOwner> SS_BoatOwners
		{
			get
			{
				return this.GetTable<SS_BoatOwner>();
			}
		}
		
		public System.Data.Linq.Table<SS_Prize> SS_Prizes
		{
			get
			{
				return this.GetTable<SS_Prize>();
			}
		}
		
		public System.Data.Linq.Table<SS_PrizeDetail> SS_PrizeDetails
		{
			get
			{
				return this.GetTable<SS_PrizeDetail>();
			}
		}
		
		public System.Data.Linq.Table<SS_Registration> SS_Registrations
		{
			get
			{
				return this.GetTable<SS_Registration>();
			}
		}
		
		public System.Data.Linq.Table<SS_ScoreMethodDetail> SS_ScoreMethodDetails
		{
			get
			{
				return this.GetTable<SS_ScoreMethodDetail>();
			}
		}
		
		public System.Data.Linq.Table<SS_Sery> SS_Series
		{
			get
			{
				return this.GetTable<SS_Sery>();
			}
		}
		
		public System.Data.Linq.Table<SS_Throwout> SS_Throwouts
		{
			get
			{
				return this.GetTable<SS_Throwout>();
			}
		}
		
		public System.Data.Linq.Table<SS_ScoreMethod> SS_ScoreMethods
		{
			get
			{
				return this.GetTable<SS_ScoreMethod>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<SS_Log> SS_Logs
		{
			get
			{
				return this.GetTable<SS_Log>();
			}
		}
		
		public System.Data.Linq.Table<SS_RaceFleet> SS_RaceFleets
		{
			get
			{
				return this.GetTable<SS_RaceFleet>();
			}
		}
		
		public System.Data.Linq.Table<SS_Score> SS_Scores
		{
			get
			{
				return this.GetTable<SS_Score>();
			}
		}
		
		public System.Data.Linq.Table<SS_FleetSery> SS_FleetSeries
		{
			get
			{
				return this.GetTable<SS_FleetSery>();
			}
		}
		
		public System.Data.Linq.Table<SS_Fleet> SS_Fleets
		{
			get
			{
				return this.GetTable<SS_Fleet>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<SS_Boat> SS_Boats
		{
			get
			{
				return this.GetTable<SS_Boat>();
			}
		}
		
		public System.Data.Linq.Table<SS_User> SS_Users
		{
			get
			{
				return this.GetTable<SS_User>();
			}
		}
		
		public System.Data.Linq.Table<SS_UserRole> SS_UserRoles
		{
			get
			{
				return this.GetTable<SS_UserRole>();
			}
		}
		
		public System.Data.Linq.Table<SS_Role> SS_Roles
		{
			get
			{
				return this.GetTable<SS_Role>();
			}
		}
		
		public System.Data.Linq.Table<SS_Result> SS_Results
		{
			get
			{
				return this.GetTable<SS_Result>();
			}
		}
		
		public System.Data.Linq.Table<SS_Penalty> SS_Penalties
		{
			get
			{
				return this.GetTable<SS_Penalty>();
			}
		}
		
		public System.Data.Linq.Table<SS_ResultSummary> SS_ResultSummaries
		{
			get
			{
				return this.GetTable<SS_ResultSummary>();
			}
		}
		
		public System.Data.Linq.Table<SS_Trophy> SS_Trophies
		{
			get
			{
				return this.GetTable<SS_Trophy>();
			}
		}
		
		public System.Data.Linq.Table<SS_Time> SS_Times
		{
			get
			{
				return this.GetTable<SS_Time>();
			}
		}
		
		public System.Data.Linq.Table<SS_Season> SS_Seasons
		{
			get
			{
				return this.GetTable<SS_Season>();
			}
		}
		
		public System.Data.Linq.Table<SS_RaceSery> SS_RaceSeries
		{
			get
			{
				return this.GetTable<SS_RaceSery>();
			}
		}
		
		public System.Data.Linq.Table<SS_Race> SS_Races
		{
			get
			{
				return this.GetTable<SS_Race>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_ThrowoutDetail")]
	public partial class SS_ThrowoutDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThrowoutDetailID;
		
		private int _ThrowoutID;
		
		private int _RaceCount;
		
		private int _ThrowoutCount;
		
		private EntityRef<SS_Throwout> _SS_Throwout;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThrowoutDetailIDChanging(int value);
    partial void OnThrowoutDetailIDChanged();
    partial void OnThrowoutIDChanging(int value);
    partial void OnThrowoutIDChanged();
    partial void OnRaceCountChanging(int value);
    partial void OnRaceCountChanged();
    partial void OnThrowoutCountChanging(int value);
    partial void OnThrowoutCountChanged();
    #endregion
		
		public SS_ThrowoutDetail()
		{
			this._SS_Throwout = default(EntityRef<SS_Throwout>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThrowoutDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ThrowoutDetailID
		{
			get
			{
				return this._ThrowoutDetailID;
			}
			set
			{
				if ((this._ThrowoutDetailID != value))
				{
					this.OnThrowoutDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ThrowoutDetailID = value;
					this.SendPropertyChanged("ThrowoutDetailID");
					this.OnThrowoutDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThrowoutID", DbType="Int NOT NULL")]
		public int ThrowoutID
		{
			get
			{
				return this._ThrowoutID;
			}
			set
			{
				if ((this._ThrowoutID != value))
				{
					if (this._SS_Throwout.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThrowoutIDChanging(value);
					this.SendPropertyChanging();
					this._ThrowoutID = value;
					this.SendPropertyChanged("ThrowoutID");
					this.OnThrowoutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceCount", DbType="Int NOT NULL")]
		public int RaceCount
		{
			get
			{
				return this._RaceCount;
			}
			set
			{
				if ((this._RaceCount != value))
				{
					this.OnRaceCountChanging(value);
					this.SendPropertyChanging();
					this._RaceCount = value;
					this.SendPropertyChanged("RaceCount");
					this.OnRaceCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThrowoutCount", DbType="Int NOT NULL")]
		public int ThrowoutCount
		{
			get
			{
				return this._ThrowoutCount;
			}
			set
			{
				if ((this._ThrowoutCount != value))
				{
					this.OnThrowoutCountChanging(value);
					this.SendPropertyChanging();
					this._ThrowoutCount = value;
					this.SendPropertyChanged("ThrowoutCount");
					this.OnThrowoutCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Throwout_SS_ThrowoutDetail", Storage="_SS_Throwout", ThisKey="ThrowoutID", OtherKey="ThrowoutID", IsForeignKey=true)]
		public SS_Throwout SS_Throwout
		{
			get
			{
				return this._SS_Throwout.Entity;
			}
			set
			{
				SS_Throwout previousValue = this._SS_Throwout.Entity;
				if (((previousValue != value) 
							|| (this._SS_Throwout.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Throwout.Entity = null;
						previousValue.SS_ThrowoutDetails.Remove(this);
					}
					this._SS_Throwout.Entity = value;
					if ((value != null))
					{
						value.SS_ThrowoutDetails.Add(this);
						this._ThrowoutID = value.ThrowoutID;
					}
					else
					{
						this._ThrowoutID = default(int);
					}
					this.SendPropertyChanged("SS_Throwout");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_BoatOwner")]
	public partial class SS_BoatOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BoatOwnerID;
		
		private int _BoatID;
		
		private System.Guid _UserID;
		
		private int _SeasonID;
		
		private System.Nullable<System.DateTime> _WhenPaymentRecd;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<SS_Boat> _SS_Boat;
		
		private EntityRef<SS_Season> _SS_Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBoatOwnerIDChanging(int value);
    partial void OnBoatOwnerIDChanged();
    partial void OnBoatIDChanging(int value);
    partial void OnBoatIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnWhenPaymentRecdChanging(System.Nullable<System.DateTime> value);
    partial void OnWhenPaymentRecdChanged();
    #endregion
		
		public SS_BoatOwner()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._SS_Boat = default(EntityRef<SS_Boat>);
			this._SS_Season = default(EntityRef<SS_Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatOwnerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BoatOwnerID
		{
			get
			{
				return this._BoatOwnerID;
			}
			set
			{
				if ((this._BoatOwnerID != value))
				{
					this.OnBoatOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._BoatOwnerID = value;
					this.SendPropertyChanged("BoatOwnerID");
					this.OnBoatOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatID", DbType="Int NOT NULL")]
		public int BoatID
		{
			get
			{
				return this._BoatID;
			}
			set
			{
				if ((this._BoatID != value))
				{
					if (this._SS_Boat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoatIDChanging(value);
					this.SendPropertyChanging();
					this._BoatID = value;
					this.SendPropertyChanged("BoatID");
					this.OnBoatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._SS_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhenPaymentRecd", DbType="DateTime")]
		public System.Nullable<System.DateTime> WhenPaymentRecd
		{
			get
			{
				return this._WhenPaymentRecd;
			}
			set
			{
				if ((this._WhenPaymentRecd != value))
				{
					this.OnWhenPaymentRecdChanging(value);
					this.SendPropertyChanging();
					this._WhenPaymentRecd = value;
					this.SendPropertyChanged("WhenPaymentRecd");
					this.OnWhenPaymentRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_SS_BoatOwner", Storage="_aspnet_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.SS_BoatOwners.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.SS_BoatOwners.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_BoatOwner", Storage="_SS_Boat", ThisKey="BoatID", OtherKey="BoatID", IsForeignKey=true)]
		public SS_Boat SS_Boat
		{
			get
			{
				return this._SS_Boat.Entity;
			}
			set
			{
				SS_Boat previousValue = this._SS_Boat.Entity;
				if (((previousValue != value) 
							|| (this._SS_Boat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Boat.Entity = null;
						previousValue.SS_BoatOwners.Remove(this);
					}
					this._SS_Boat.Entity = value;
					if ((value != null))
					{
						value.SS_BoatOwners.Add(this);
						this._BoatID = value.BoatID;
					}
					else
					{
						this._BoatID = default(int);
					}
					this.SendPropertyChanged("SS_Boat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_BoatOwner", Storage="_SS_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public SS_Season SS_Season
		{
			get
			{
				return this._SS_Season.Entity;
			}
			set
			{
				SS_Season previousValue = this._SS_Season.Entity;
				if (((previousValue != value) 
							|| (this._SS_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Season.Entity = null;
						previousValue.SS_BoatOwners.Remove(this);
					}
					this._SS_Season.Entity = value;
					if ((value != null))
					{
						value.SS_BoatOwners.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("SS_Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Prize")]
	public partial class SS_Prize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrizeID;
		
		private string _PrizeName;
		
		private bool _IsActive;
		
		private EntitySet<SS_PrizeDetail> _SS_PrizeDetails;
		
		private EntitySet<SS_FleetSery> _SS_FleetSeries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrizeIDChanging(int value);
    partial void OnPrizeIDChanged();
    partial void OnPrizeNameChanging(string value);
    partial void OnPrizeNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public SS_Prize()
		{
			this._SS_PrizeDetails = new EntitySet<SS_PrizeDetail>(new Action<SS_PrizeDetail>(this.attach_SS_PrizeDetails), new Action<SS_PrizeDetail>(this.detach_SS_PrizeDetails));
			this._SS_FleetSeries = new EntitySet<SS_FleetSery>(new Action<SS_FleetSery>(this.attach_SS_FleetSeries), new Action<SS_FleetSery>(this.detach_SS_FleetSeries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrizeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrizeID
		{
			get
			{
				return this._PrizeID;
			}
			set
			{
				if ((this._PrizeID != value))
				{
					this.OnPrizeIDChanging(value);
					this.SendPropertyChanging();
					this._PrizeID = value;
					this.SendPropertyChanged("PrizeID");
					this.OnPrizeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrizeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PrizeName
		{
			get
			{
				return this._PrizeName;
			}
			set
			{
				if ((this._PrizeName != value))
				{
					this.OnPrizeNameChanging(value);
					this.SendPropertyChanging();
					this._PrizeName = value;
					this.SendPropertyChanged("PrizeName");
					this.OnPrizeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Prize_SS_PrizeDetail", Storage="_SS_PrizeDetails", ThisKey="PrizeID", OtherKey="PrizeID")]
		public EntitySet<SS_PrizeDetail> SS_PrizeDetails
		{
			get
			{
				return this._SS_PrizeDetails;
			}
			set
			{
				this._SS_PrizeDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Prize_SS_FleetSery", Storage="_SS_FleetSeries", ThisKey="PrizeID", OtherKey="PrizeID")]
		public EntitySet<SS_FleetSery> SS_FleetSeries
		{
			get
			{
				return this._SS_FleetSeries;
			}
			set
			{
				this._SS_FleetSeries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_PrizeDetails(SS_PrizeDetail entity)
		{
			this.SendPropertyChanging();
			entity.SS_Prize = this;
		}
		
		private void detach_SS_PrizeDetails(SS_PrizeDetail entity)
		{
			this.SendPropertyChanging();
			entity.SS_Prize = null;
		}
		
		private void attach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Prize = this;
		}
		
		private void detach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Prize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_PrizeDetail")]
	public partial class SS_PrizeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrizeDetailID;
		
		private int _PrizeID;
		
		private int _BoatCount;
		
		private int _PrizeCount;
		
		private EntityRef<SS_Prize> _SS_Prize;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrizeDetailIDChanging(int value);
    partial void OnPrizeDetailIDChanged();
    partial void OnPrizeIDChanging(int value);
    partial void OnPrizeIDChanged();
    partial void OnBoatCountChanging(int value);
    partial void OnBoatCountChanged();
    partial void OnPrizeCountChanging(int value);
    partial void OnPrizeCountChanged();
    #endregion
		
		public SS_PrizeDetail()
		{
			this._SS_Prize = default(EntityRef<SS_Prize>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrizeDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrizeDetailID
		{
			get
			{
				return this._PrizeDetailID;
			}
			set
			{
				if ((this._PrizeDetailID != value))
				{
					this.OnPrizeDetailIDChanging(value);
					this.SendPropertyChanging();
					this._PrizeDetailID = value;
					this.SendPropertyChanged("PrizeDetailID");
					this.OnPrizeDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrizeID", DbType="Int NOT NULL")]
		public int PrizeID
		{
			get
			{
				return this._PrizeID;
			}
			set
			{
				if ((this._PrizeID != value))
				{
					if (this._SS_Prize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrizeIDChanging(value);
					this.SendPropertyChanging();
					this._PrizeID = value;
					this.SendPropertyChanged("PrizeID");
					this.OnPrizeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatCount", DbType="Int NOT NULL")]
		public int BoatCount
		{
			get
			{
				return this._BoatCount;
			}
			set
			{
				if ((this._BoatCount != value))
				{
					this.OnBoatCountChanging(value);
					this.SendPropertyChanging();
					this._BoatCount = value;
					this.SendPropertyChanged("BoatCount");
					this.OnBoatCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrizeCount", DbType="Int NOT NULL")]
		public int PrizeCount
		{
			get
			{
				return this._PrizeCount;
			}
			set
			{
				if ((this._PrizeCount != value))
				{
					this.OnPrizeCountChanging(value);
					this.SendPropertyChanging();
					this._PrizeCount = value;
					this.SendPropertyChanged("PrizeCount");
					this.OnPrizeCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Prize_SS_PrizeDetail", Storage="_SS_Prize", ThisKey="PrizeID", OtherKey="PrizeID", IsForeignKey=true)]
		public SS_Prize SS_Prize
		{
			get
			{
				return this._SS_Prize.Entity;
			}
			set
			{
				SS_Prize previousValue = this._SS_Prize.Entity;
				if (((previousValue != value) 
							|| (this._SS_Prize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Prize.Entity = null;
						previousValue.SS_PrizeDetails.Remove(this);
					}
					this._SS_Prize.Entity = value;
					if ((value != null))
					{
						value.SS_PrizeDetails.Add(this);
						this._PrizeID = value.PrizeID;
					}
					else
					{
						this._PrizeID = default(int);
					}
					this.SendPropertyChanged("SS_Prize");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Registration")]
	public partial class SS_Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegistrationID;
		
		private int _FleetSeriesID;
		
		private int _BoatID;
		
		private System.Nullable<System.DateTime> _WhenDuesPaid;
		
		private EntityRef<SS_FleetSery> _SS_FleetSery;
		
		private EntityRef<SS_Boat> _SS_Boat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnFleetSeriesIDChanging(int value);
    partial void OnFleetSeriesIDChanged();
    partial void OnBoatIDChanging(int value);
    partial void OnBoatIDChanged();
    partial void OnWhenDuesPaidChanging(System.Nullable<System.DateTime> value);
    partial void OnWhenDuesPaidChanged();
    #endregion
		
		public SS_Registration()
		{
			this._SS_FleetSery = default(EntityRef<SS_FleetSery>);
			this._SS_Boat = default(EntityRef<SS_Boat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetSeriesID", DbType="Int NOT NULL")]
		public int FleetSeriesID
		{
			get
			{
				return this._FleetSeriesID;
			}
			set
			{
				if ((this._FleetSeriesID != value))
				{
					if (this._SS_FleetSery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._FleetSeriesID = value;
					this.SendPropertyChanged("FleetSeriesID");
					this.OnFleetSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatID", DbType="Int NOT NULL")]
		public int BoatID
		{
			get
			{
				return this._BoatID;
			}
			set
			{
				if ((this._BoatID != value))
				{
					if (this._SS_Boat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoatIDChanging(value);
					this.SendPropertyChanging();
					this._BoatID = value;
					this.SendPropertyChanged("BoatID");
					this.OnBoatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhenDuesPaid", DbType="DateTime")]
		public System.Nullable<System.DateTime> WhenDuesPaid
		{
			get
			{
				return this._WhenDuesPaid;
			}
			set
			{
				if ((this._WhenDuesPaid != value))
				{
					this.OnWhenDuesPaidChanging(value);
					this.SendPropertyChanging();
					this._WhenDuesPaid = value;
					this.SendPropertyChanged("WhenDuesPaid");
					this.OnWhenDuesPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_FleetSery_SS_Registration", Storage="_SS_FleetSery", ThisKey="FleetSeriesID", OtherKey="FleetSeriesID", IsForeignKey=true)]
		public SS_FleetSery SS_FleetSery
		{
			get
			{
				return this._SS_FleetSery.Entity;
			}
			set
			{
				SS_FleetSery previousValue = this._SS_FleetSery.Entity;
				if (((previousValue != value) 
							|| (this._SS_FleetSery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_FleetSery.Entity = null;
						previousValue.SS_Registrations.Remove(this);
					}
					this._SS_FleetSery.Entity = value;
					if ((value != null))
					{
						value.SS_Registrations.Add(this);
						this._FleetSeriesID = value.FleetSeriesID;
					}
					else
					{
						this._FleetSeriesID = default(int);
					}
					this.SendPropertyChanged("SS_FleetSery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_Registration", Storage="_SS_Boat", ThisKey="BoatID", OtherKey="BoatID", IsForeignKey=true)]
		public SS_Boat SS_Boat
		{
			get
			{
				return this._SS_Boat.Entity;
			}
			set
			{
				SS_Boat previousValue = this._SS_Boat.Entity;
				if (((previousValue != value) 
							|| (this._SS_Boat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Boat.Entity = null;
						previousValue.SS_Registrations.Remove(this);
					}
					this._SS_Boat.Entity = value;
					if ((value != null))
					{
						value.SS_Registrations.Add(this);
						this._BoatID = value.BoatID;
					}
					else
					{
						this._BoatID = default(int);
					}
					this.SendPropertyChanged("SS_Boat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_ScoreMethodDetail")]
	public partial class SS_ScoreMethodDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScoreMethodDetailID;
		
		private int _ScoreMethodID;
		
		private int _Place;
		
		private double _Points;
		
		private EntityRef<SS_ScoreMethod> _SS_ScoreMethod;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoreMethodDetailIDChanging(int value);
    partial void OnScoreMethodDetailIDChanged();
    partial void OnScoreMethodIDChanging(int value);
    partial void OnScoreMethodIDChanged();
    partial void OnPlaceChanging(int value);
    partial void OnPlaceChanged();
    partial void OnPointsChanging(double value);
    partial void OnPointsChanged();
    #endregion
		
		public SS_ScoreMethodDetail()
		{
			this._SS_ScoreMethod = default(EntityRef<SS_ScoreMethod>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreMethodDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScoreMethodDetailID
		{
			get
			{
				return this._ScoreMethodDetailID;
			}
			set
			{
				if ((this._ScoreMethodDetailID != value))
				{
					this.OnScoreMethodDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreMethodDetailID = value;
					this.SendPropertyChanged("ScoreMethodDetailID");
					this.OnScoreMethodDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreMethodID", DbType="Int NOT NULL")]
		public int ScoreMethodID
		{
			get
			{
				return this._ScoreMethodID;
			}
			set
			{
				if ((this._ScoreMethodID != value))
				{
					if (this._SS_ScoreMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreMethodIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreMethodID = value;
					this.SendPropertyChanged("ScoreMethodID");
					this.OnScoreMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="Int NOT NULL")]
		public int Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Float NOT NULL")]
		public double Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_ScoreMethod_SS_ScoreMethodDetail", Storage="_SS_ScoreMethod", ThisKey="ScoreMethodID", OtherKey="ScoreMethodID", IsForeignKey=true)]
		public SS_ScoreMethod SS_ScoreMethod
		{
			get
			{
				return this._SS_ScoreMethod.Entity;
			}
			set
			{
				SS_ScoreMethod previousValue = this._SS_ScoreMethod.Entity;
				if (((previousValue != value) 
							|| (this._SS_ScoreMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_ScoreMethod.Entity = null;
						previousValue.SS_ScoreMethodDetails.Remove(this);
					}
					this._SS_ScoreMethod.Entity = value;
					if ((value != null))
					{
						value.SS_ScoreMethodDetails.Add(this);
						this._ScoreMethodID = value.ScoreMethodID;
					}
					else
					{
						this._ScoreMethodID = default(int);
					}
					this.SendPropertyChanged("SS_ScoreMethod");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Series")]
	public partial class SS_Sery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeriesID;
		
		private string _SeriesName;
		
		private bool _IsActive;
		
		private bool _IsClubSeries;
		
		private bool _IsBOTYCalc;
		
		private EntitySet<SS_FleetSery> _SS_FleetSeries;
		
		private EntitySet<SS_Trophy> _SS_Trophies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeriesIDChanging(int value);
    partial void OnSeriesIDChanged();
    partial void OnSeriesNameChanging(string value);
    partial void OnSeriesNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsClubSeriesChanging(bool value);
    partial void OnIsClubSeriesChanged();
    partial void OnIsBOTYCalcChanging(bool value);
    partial void OnIsBOTYCalcChanged();
    #endregion
		
		public SS_Sery()
		{
			this._SS_FleetSeries = new EntitySet<SS_FleetSery>(new Action<SS_FleetSery>(this.attach_SS_FleetSeries), new Action<SS_FleetSery>(this.detach_SS_FleetSeries));
			this._SS_Trophies = new EntitySet<SS_Trophy>(new Action<SS_Trophy>(this.attach_SS_Trophies), new Action<SS_Trophy>(this.detach_SS_Trophies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeriesID
		{
			get
			{
				return this._SeriesID;
			}
			set
			{
				if ((this._SeriesID != value))
				{
					this.OnSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._SeriesID = value;
					this.SendPropertyChanged("SeriesID");
					this.OnSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesName", DbType="NVarChar(50)")]
		public string SeriesName
		{
			get
			{
				return this._SeriesName;
			}
			set
			{
				if ((this._SeriesName != value))
				{
					this.OnSeriesNameChanging(value);
					this.SendPropertyChanging();
					this._SeriesName = value;
					this.SendPropertyChanged("SeriesName");
					this.OnSeriesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClubSeries", DbType="Bit NOT NULL")]
		public bool IsClubSeries
		{
			get
			{
				return this._IsClubSeries;
			}
			set
			{
				if ((this._IsClubSeries != value))
				{
					this.OnIsClubSeriesChanging(value);
					this.SendPropertyChanging();
					this._IsClubSeries = value;
					this.SendPropertyChanged("IsClubSeries");
					this.OnIsClubSeriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBOTYCalc", DbType="Bit NOT NULL")]
		public bool IsBOTYCalc
		{
			get
			{
				return this._IsBOTYCalc;
			}
			set
			{
				if ((this._IsBOTYCalc != value))
				{
					this.OnIsBOTYCalcChanging(value);
					this.SendPropertyChanging();
					this._IsBOTYCalc = value;
					this.SendPropertyChanged("IsBOTYCalc");
					this.OnIsBOTYCalcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Sery_SS_FleetSery", Storage="_SS_FleetSeries", ThisKey="SeriesID", OtherKey="SeriesID")]
		public EntitySet<SS_FleetSery> SS_FleetSeries
		{
			get
			{
				return this._SS_FleetSeries;
			}
			set
			{
				this._SS_FleetSeries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Sery_SS_Trophy", Storage="_SS_Trophies", ThisKey="SeriesID", OtherKey="SeriesID")]
		public EntitySet<SS_Trophy> SS_Trophies
		{
			get
			{
				return this._SS_Trophies;
			}
			set
			{
				this._SS_Trophies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Sery = this;
		}
		
		private void detach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Sery = null;
		}
		
		private void attach_SS_Trophies(SS_Trophy entity)
		{
			this.SendPropertyChanging();
			entity.SS_Sery = this;
		}
		
		private void detach_SS_Trophies(SS_Trophy entity)
		{
			this.SendPropertyChanging();
			entity.SS_Sery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Throwout")]
	public partial class SS_Throwout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThrowoutID;
		
		private string _ThrowoutName;
		
		private bool _IsActive;
		
		private EntitySet<SS_ThrowoutDetail> _SS_ThrowoutDetails;
		
		private EntitySet<SS_FleetSery> _SS_FleetSeries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThrowoutIDChanging(int value);
    partial void OnThrowoutIDChanged();
    partial void OnThrowoutNameChanging(string value);
    partial void OnThrowoutNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public SS_Throwout()
		{
			this._SS_ThrowoutDetails = new EntitySet<SS_ThrowoutDetail>(new Action<SS_ThrowoutDetail>(this.attach_SS_ThrowoutDetails), new Action<SS_ThrowoutDetail>(this.detach_SS_ThrowoutDetails));
			this._SS_FleetSeries = new EntitySet<SS_FleetSery>(new Action<SS_FleetSery>(this.attach_SS_FleetSeries), new Action<SS_FleetSery>(this.detach_SS_FleetSeries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThrowoutID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ThrowoutID
		{
			get
			{
				return this._ThrowoutID;
			}
			set
			{
				if ((this._ThrowoutID != value))
				{
					this.OnThrowoutIDChanging(value);
					this.SendPropertyChanging();
					this._ThrowoutID = value;
					this.SendPropertyChanged("ThrowoutID");
					this.OnThrowoutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThrowoutName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ThrowoutName
		{
			get
			{
				return this._ThrowoutName;
			}
			set
			{
				if ((this._ThrowoutName != value))
				{
					this.OnThrowoutNameChanging(value);
					this.SendPropertyChanging();
					this._ThrowoutName = value;
					this.SendPropertyChanged("ThrowoutName");
					this.OnThrowoutNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Throwout_SS_ThrowoutDetail", Storage="_SS_ThrowoutDetails", ThisKey="ThrowoutID", OtherKey="ThrowoutID")]
		public EntitySet<SS_ThrowoutDetail> SS_ThrowoutDetails
		{
			get
			{
				return this._SS_ThrowoutDetails;
			}
			set
			{
				this._SS_ThrowoutDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Throwout_SS_FleetSery", Storage="_SS_FleetSeries", ThisKey="ThrowoutID", OtherKey="ThrowoutID")]
		public EntitySet<SS_FleetSery> SS_FleetSeries
		{
			get
			{
				return this._SS_FleetSeries;
			}
			set
			{
				this._SS_FleetSeries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_ThrowoutDetails(SS_ThrowoutDetail entity)
		{
			this.SendPropertyChanging();
			entity.SS_Throwout = this;
		}
		
		private void detach_SS_ThrowoutDetails(SS_ThrowoutDetail entity)
		{
			this.SendPropertyChanging();
			entity.SS_Throwout = null;
		}
		
		private void attach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Throwout = this;
		}
		
		private void detach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Throwout = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_ScoreMethod")]
	public partial class SS_ScoreMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScoreMethodID;
		
		private string _ScoreMethodName;
		
		private bool _IsActive;
		
		private string _Notes;
		
		private EntitySet<SS_ScoreMethodDetail> _SS_ScoreMethodDetails;
		
		private EntitySet<SS_FleetSery> _SS_FleetSeries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoreMethodIDChanging(int value);
    partial void OnScoreMethodIDChanged();
    partial void OnScoreMethodNameChanging(string value);
    partial void OnScoreMethodNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public SS_ScoreMethod()
		{
			this._SS_ScoreMethodDetails = new EntitySet<SS_ScoreMethodDetail>(new Action<SS_ScoreMethodDetail>(this.attach_SS_ScoreMethodDetails), new Action<SS_ScoreMethodDetail>(this.detach_SS_ScoreMethodDetails));
			this._SS_FleetSeries = new EntitySet<SS_FleetSery>(new Action<SS_FleetSery>(this.attach_SS_FleetSeries), new Action<SS_FleetSery>(this.detach_SS_FleetSeries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreMethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScoreMethodID
		{
			get
			{
				return this._ScoreMethodID;
			}
			set
			{
				if ((this._ScoreMethodID != value))
				{
					this.OnScoreMethodIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreMethodID = value;
					this.SendPropertyChanged("ScoreMethodID");
					this.OnScoreMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreMethodName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ScoreMethodName
		{
			get
			{
				return this._ScoreMethodName;
			}
			set
			{
				if ((this._ScoreMethodName != value))
				{
					this.OnScoreMethodNameChanging(value);
					this.SendPropertyChanging();
					this._ScoreMethodName = value;
					this.SendPropertyChanged("ScoreMethodName");
					this.OnScoreMethodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_ScoreMethod_SS_ScoreMethodDetail", Storage="_SS_ScoreMethodDetails", ThisKey="ScoreMethodID", OtherKey="ScoreMethodID")]
		public EntitySet<SS_ScoreMethodDetail> SS_ScoreMethodDetails
		{
			get
			{
				return this._SS_ScoreMethodDetails;
			}
			set
			{
				this._SS_ScoreMethodDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_ScoreMethod_SS_FleetSery", Storage="_SS_FleetSeries", ThisKey="ScoreMethodID", OtherKey="ScoreMethodID")]
		public EntitySet<SS_FleetSery> SS_FleetSeries
		{
			get
			{
				return this._SS_FleetSeries;
			}
			set
			{
				this._SS_FleetSeries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_ScoreMethodDetails(SS_ScoreMethodDetail entity)
		{
			this.SendPropertyChanging();
			entity.SS_ScoreMethod = this;
		}
		
		private void detach_SS_ScoreMethodDetails(SS_ScoreMethodDetail entity)
		{
			this.SendPropertyChanging();
			entity.SS_ScoreMethod = null;
		}
		
		private void attach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_ScoreMethod = this;
		}
		
		private void detach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_ScoreMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Log")]
	public partial class SS_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private System.DateTime _LogDate;
		
		private string _Username;
		
		private int _Event;
		
		private string _Subject;
		
		private string _Source;
		
		private string _Operation;
		
		private string _Reference;
		
		private string _Details;
		
		private bool _IsFlagged;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEventChanging(int value);
    partial void OnEventChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnReferenceChanging(string value);
    partial void OnReferenceChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnIsFlaggedChanging(bool value);
    partial void OnIsFlaggedChanged();
    #endregion
		
		public SS_Log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="Int NOT NULL")]
		public int Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(20)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="NVarChar(20)")]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reference", DbType="NVarChar(200)")]
		public string Reference
		{
			get
			{
				return this._Reference;
			}
			set
			{
				if ((this._Reference != value))
				{
					this.OnReferenceChanging(value);
					this.SendPropertyChanging();
					this._Reference = value;
					this.SendPropertyChanged("Reference");
					this.OnReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFlagged", DbType="Bit NOT NULL")]
		public bool IsFlagged
		{
			get
			{
				return this._IsFlagged;
			}
			set
			{
				if ((this._IsFlagged != value))
				{
					this.OnIsFlaggedChanging(value);
					this.SendPropertyChanging();
					this._IsFlagged = value;
					this.SendPropertyChanged("IsFlagged");
					this.OnIsFlaggedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_RaceFleet")]
	public partial class SS_RaceFleet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceFleetID;
		
		private int _RaceID;
		
		private int _FleetID;
		
		private System.Nullable<bool> _IsAbandoned;
		
		private string _Course;
		
		private System.Nullable<double> _Distance;
		
		private string _DistanceUnits;
		
		private EntityRef<SS_Fleet> _SS_Fleet;
		
		private EntityRef<SS_Race> _SS_Race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceFleetIDChanging(int value);
    partial void OnRaceFleetIDChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnFleetIDChanging(int value);
    partial void OnFleetIDChanged();
    partial void OnIsAbandonedChanging(System.Nullable<bool> value);
    partial void OnIsAbandonedChanged();
    partial void OnCourseChanging(string value);
    partial void OnCourseChanged();
    partial void OnDistanceChanging(System.Nullable<double> value);
    partial void OnDistanceChanged();
    partial void OnDistanceUnitsChanging(string value);
    partial void OnDistanceUnitsChanged();
    #endregion
		
		public SS_RaceFleet()
		{
			this._SS_Fleet = default(EntityRef<SS_Fleet>);
			this._SS_Race = default(EntityRef<SS_Race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceFleetID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaceFleetID
		{
			get
			{
				return this._RaceFleetID;
			}
			set
			{
				if ((this._RaceFleetID != value))
				{
					this.OnRaceFleetIDChanging(value);
					this.SendPropertyChanging();
					this._RaceFleetID = value;
					this.SendPropertyChanged("RaceFleetID");
					this.OnRaceFleetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._SS_Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetID", DbType="Int NOT NULL")]
		public int FleetID
		{
			get
			{
				return this._FleetID;
			}
			set
			{
				if ((this._FleetID != value))
				{
					if (this._SS_Fleet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetIDChanging(value);
					this.SendPropertyChanging();
					this._FleetID = value;
					this.SendPropertyChanged("FleetID");
					this.OnFleetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAbandoned", DbType="Bit")]
		public System.Nullable<bool> IsAbandoned
		{
			get
			{
				return this._IsAbandoned;
			}
			set
			{
				if ((this._IsAbandoned != value))
				{
					this.OnIsAbandonedChanging(value);
					this.SendPropertyChanging();
					this._IsAbandoned = value;
					this.SendPropertyChanged("IsAbandoned");
					this.OnIsAbandonedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course", DbType="NVarChar(50)")]
		public string Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				if ((this._Course != value))
				{
					this.OnCourseChanging(value);
					this.SendPropertyChanging();
					this._Course = value;
					this.SendPropertyChanged("Course");
					this.OnCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceUnits", DbType="NVarChar(20)")]
		public string DistanceUnits
		{
			get
			{
				return this._DistanceUnits;
			}
			set
			{
				if ((this._DistanceUnits != value))
				{
					this.OnDistanceUnitsChanging(value);
					this.SendPropertyChanging();
					this._DistanceUnits = value;
					this.SendPropertyChanged("DistanceUnits");
					this.OnDistanceUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Fleet_SS_RaceFleet", Storage="_SS_Fleet", ThisKey="FleetID", OtherKey="FleetID", IsForeignKey=true)]
		public SS_Fleet SS_Fleet
		{
			get
			{
				return this._SS_Fleet.Entity;
			}
			set
			{
				SS_Fleet previousValue = this._SS_Fleet.Entity;
				if (((previousValue != value) 
							|| (this._SS_Fleet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Fleet.Entity = null;
						previousValue.SS_RaceFleets.Remove(this);
					}
					this._SS_Fleet.Entity = value;
					if ((value != null))
					{
						value.SS_RaceFleets.Add(this);
						this._FleetID = value.FleetID;
					}
					else
					{
						this._FleetID = default(int);
					}
					this.SendPropertyChanged("SS_Fleet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Race_SS_RaceFleet", Storage="_SS_Race", ThisKey="RaceID", OtherKey="RaceID", IsForeignKey=true)]
		public SS_Race SS_Race
		{
			get
			{
				return this._SS_Race.Entity;
			}
			set
			{
				SS_Race previousValue = this._SS_Race.Entity;
				if (((previousValue != value) 
							|| (this._SS_Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Race.Entity = null;
						previousValue.SS_RaceFleets.Remove(this);
					}
					this._SS_Race.Entity = value;
					if ((value != null))
					{
						value.SS_RaceFleets.Add(this);
						this._RaceID = value.RaceID;
					}
					else
					{
						this._RaceID = default(int);
					}
					this.SendPropertyChanged("SS_Race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Score")]
	public partial class SS_Score : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScoreID;
		
		private int _RaceID;
		
		private int _BoatID;
		
		private int _PenaltyID;
		
		private int _FinishPlace;
		
		private string _FinishTime;
		
		private string _AdjustedTime;
		
		private EntityRef<SS_Boat> _SS_Boat;
		
		private EntityRef<SS_Penalty> _SS_Penalty;
		
		private EntityRef<SS_Race> _SS_Race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoreIDChanging(int value);
    partial void OnScoreIDChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnBoatIDChanging(int value);
    partial void OnBoatIDChanged();
    partial void OnPenaltyIDChanging(int value);
    partial void OnPenaltyIDChanged();
    partial void OnFinishPlaceChanging(int value);
    partial void OnFinishPlaceChanged();
    partial void OnFinishTimeChanging(string value);
    partial void OnFinishTimeChanged();
    partial void OnAdjustedTimeChanging(string value);
    partial void OnAdjustedTimeChanged();
    #endregion
		
		public SS_Score()
		{
			this._SS_Boat = default(EntityRef<SS_Boat>);
			this._SS_Penalty = default(EntityRef<SS_Penalty>);
			this._SS_Race = default(EntityRef<SS_Race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScoreID
		{
			get
			{
				return this._ScoreID;
			}
			set
			{
				if ((this._ScoreID != value))
				{
					this.OnScoreIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreID = value;
					this.SendPropertyChanged("ScoreID");
					this.OnScoreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._SS_Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatID", DbType="Int NOT NULL")]
		public int BoatID
		{
			get
			{
				return this._BoatID;
			}
			set
			{
				if ((this._BoatID != value))
				{
					if (this._SS_Boat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoatIDChanging(value);
					this.SendPropertyChanging();
					this._BoatID = value;
					this.SendPropertyChanged("BoatID");
					this.OnBoatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PenaltyID", DbType="Int NOT NULL")]
		public int PenaltyID
		{
			get
			{
				return this._PenaltyID;
			}
			set
			{
				if ((this._PenaltyID != value))
				{
					if (this._SS_Penalty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPenaltyIDChanging(value);
					this.SendPropertyChanging();
					this._PenaltyID = value;
					this.SendPropertyChanged("PenaltyID");
					this.OnPenaltyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishPlace", DbType="Int NOT NULL")]
		public int FinishPlace
		{
			get
			{
				return this._FinishPlace;
			}
			set
			{
				if ((this._FinishPlace != value))
				{
					this.OnFinishPlaceChanging(value);
					this.SendPropertyChanging();
					this._FinishPlace = value;
					this.SendPropertyChanged("FinishPlace");
					this.OnFinishPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishTime", DbType="NVarChar(15)")]
		public string FinishTime
		{
			get
			{
				return this._FinishTime;
			}
			set
			{
				if ((this._FinishTime != value))
				{
					this.OnFinishTimeChanging(value);
					this.SendPropertyChanging();
					this._FinishTime = value;
					this.SendPropertyChanged("FinishTime");
					this.OnFinishTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustedTime", DbType="NVarChar(15)")]
		public string AdjustedTime
		{
			get
			{
				return this._AdjustedTime;
			}
			set
			{
				if ((this._AdjustedTime != value))
				{
					this.OnAdjustedTimeChanging(value);
					this.SendPropertyChanging();
					this._AdjustedTime = value;
					this.SendPropertyChanged("AdjustedTime");
					this.OnAdjustedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_Score", Storage="_SS_Boat", ThisKey="BoatID", OtherKey="BoatID", IsForeignKey=true)]
		public SS_Boat SS_Boat
		{
			get
			{
				return this._SS_Boat.Entity;
			}
			set
			{
				SS_Boat previousValue = this._SS_Boat.Entity;
				if (((previousValue != value) 
							|| (this._SS_Boat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Boat.Entity = null;
						previousValue.SS_Scores.Remove(this);
					}
					this._SS_Boat.Entity = value;
					if ((value != null))
					{
						value.SS_Scores.Add(this);
						this._BoatID = value.BoatID;
					}
					else
					{
						this._BoatID = default(int);
					}
					this.SendPropertyChanged("SS_Boat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Penalty_SS_Score", Storage="_SS_Penalty", ThisKey="PenaltyID", OtherKey="PenaltyID", IsForeignKey=true)]
		public SS_Penalty SS_Penalty
		{
			get
			{
				return this._SS_Penalty.Entity;
			}
			set
			{
				SS_Penalty previousValue = this._SS_Penalty.Entity;
				if (((previousValue != value) 
							|| (this._SS_Penalty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Penalty.Entity = null;
						previousValue.SS_Scores.Remove(this);
					}
					this._SS_Penalty.Entity = value;
					if ((value != null))
					{
						value.SS_Scores.Add(this);
						this._PenaltyID = value.PenaltyID;
					}
					else
					{
						this._PenaltyID = default(int);
					}
					this.SendPropertyChanged("SS_Penalty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Race_SS_Score", Storage="_SS_Race", ThisKey="RaceID", OtherKey="RaceID", IsForeignKey=true)]
		public SS_Race SS_Race
		{
			get
			{
				return this._SS_Race.Entity;
			}
			set
			{
				SS_Race previousValue = this._SS_Race.Entity;
				if (((previousValue != value) 
							|| (this._SS_Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Race.Entity = null;
						previousValue.SS_Scores.Remove(this);
					}
					this._SS_Race.Entity = value;
					if ((value != null))
					{
						value.SS_Scores.Add(this);
						this._RaceID = value.RaceID;
					}
					else
					{
						this._RaceID = default(int);
					}
					this.SendPropertyChanged("SS_Race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_FleetSeries")]
	public partial class SS_FleetSery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FleetSeriesID;
		
		private int _SeriesID;
		
		private int _SeasonID;
		
		private int _FleetID;
		
		private int _ScoreMethodID;
		
		private int _ThrowoutID;
		
		private System.Nullable<int> _PrizeID;
		
		private bool _IsActive;
		
		private EntitySet<SS_Registration> _SS_Registrations;
		
		private EntitySet<SS_Result> _SS_Results;
		
		private EntitySet<SS_ResultSummary> _SS_ResultSummaries;
		
		private EntitySet<SS_RaceSery> _SS_RaceSeries;
		
		private EntityRef<SS_Prize> _SS_Prize;
		
		private EntityRef<SS_ScoreMethod> _SS_ScoreMethod;
		
		private EntityRef<SS_Sery> _SS_Sery;
		
		private EntityRef<SS_Throwout> _SS_Throwout;
		
		private EntityRef<SS_Fleet> _SS_Fleet;
		
		private EntityRef<SS_Season> _SS_Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFleetSeriesIDChanging(int value);
    partial void OnFleetSeriesIDChanged();
    partial void OnSeriesIDChanging(int value);
    partial void OnSeriesIDChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnFleetIDChanging(int value);
    partial void OnFleetIDChanged();
    partial void OnScoreMethodIDChanging(int value);
    partial void OnScoreMethodIDChanged();
    partial void OnThrowoutIDChanging(int value);
    partial void OnThrowoutIDChanged();
    partial void OnPrizeIDChanging(System.Nullable<int> value);
    partial void OnPrizeIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public SS_FleetSery()
		{
			this._SS_Registrations = new EntitySet<SS_Registration>(new Action<SS_Registration>(this.attach_SS_Registrations), new Action<SS_Registration>(this.detach_SS_Registrations));
			this._SS_Results = new EntitySet<SS_Result>(new Action<SS_Result>(this.attach_SS_Results), new Action<SS_Result>(this.detach_SS_Results));
			this._SS_ResultSummaries = new EntitySet<SS_ResultSummary>(new Action<SS_ResultSummary>(this.attach_SS_ResultSummaries), new Action<SS_ResultSummary>(this.detach_SS_ResultSummaries));
			this._SS_RaceSeries = new EntitySet<SS_RaceSery>(new Action<SS_RaceSery>(this.attach_SS_RaceSeries), new Action<SS_RaceSery>(this.detach_SS_RaceSeries));
			this._SS_Prize = default(EntityRef<SS_Prize>);
			this._SS_ScoreMethod = default(EntityRef<SS_ScoreMethod>);
			this._SS_Sery = default(EntityRef<SS_Sery>);
			this._SS_Throwout = default(EntityRef<SS_Throwout>);
			this._SS_Fleet = default(EntityRef<SS_Fleet>);
			this._SS_Season = default(EntityRef<SS_Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetSeriesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FleetSeriesID
		{
			get
			{
				return this._FleetSeriesID;
			}
			set
			{
				if ((this._FleetSeriesID != value))
				{
					this.OnFleetSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._FleetSeriesID = value;
					this.SendPropertyChanged("FleetSeriesID");
					this.OnFleetSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesID", DbType="Int NOT NULL")]
		public int SeriesID
		{
			get
			{
				return this._SeriesID;
			}
			set
			{
				if ((this._SeriesID != value))
				{
					if (this._SS_Sery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._SeriesID = value;
					this.SendPropertyChanged("SeriesID");
					this.OnSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._SS_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetID", DbType="Int NOT NULL")]
		public int FleetID
		{
			get
			{
				return this._FleetID;
			}
			set
			{
				if ((this._FleetID != value))
				{
					if (this._SS_Fleet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetIDChanging(value);
					this.SendPropertyChanging();
					this._FleetID = value;
					this.SendPropertyChanged("FleetID");
					this.OnFleetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreMethodID", DbType="Int NOT NULL")]
		public int ScoreMethodID
		{
			get
			{
				return this._ScoreMethodID;
			}
			set
			{
				if ((this._ScoreMethodID != value))
				{
					if (this._SS_ScoreMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreMethodIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreMethodID = value;
					this.SendPropertyChanged("ScoreMethodID");
					this.OnScoreMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThrowoutID", DbType="Int NOT NULL")]
		public int ThrowoutID
		{
			get
			{
				return this._ThrowoutID;
			}
			set
			{
				if ((this._ThrowoutID != value))
				{
					if (this._SS_Throwout.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThrowoutIDChanging(value);
					this.SendPropertyChanging();
					this._ThrowoutID = value;
					this.SendPropertyChanged("ThrowoutID");
					this.OnThrowoutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrizeID", DbType="Int")]
		public System.Nullable<int> PrizeID
		{
			get
			{
				return this._PrizeID;
			}
			set
			{
				if ((this._PrizeID != value))
				{
					if (this._SS_Prize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrizeIDChanging(value);
					this.SendPropertyChanging();
					this._PrizeID = value;
					this.SendPropertyChanged("PrizeID");
					this.OnPrizeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_FleetSery_SS_Registration", Storage="_SS_Registrations", ThisKey="FleetSeriesID", OtherKey="FleetSeriesID")]
		public EntitySet<SS_Registration> SS_Registrations
		{
			get
			{
				return this._SS_Registrations;
			}
			set
			{
				this._SS_Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_FleetSery_SS_Result", Storage="_SS_Results", ThisKey="FleetSeriesID", OtherKey="FleetSeriesID")]
		public EntitySet<SS_Result> SS_Results
		{
			get
			{
				return this._SS_Results;
			}
			set
			{
				this._SS_Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_FleetSery_SS_ResultSummary", Storage="_SS_ResultSummaries", ThisKey="FleetSeriesID", OtherKey="FleetSeriesID")]
		public EntitySet<SS_ResultSummary> SS_ResultSummaries
		{
			get
			{
				return this._SS_ResultSummaries;
			}
			set
			{
				this._SS_ResultSummaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_FleetSery_SS_RaceSery", Storage="_SS_RaceSeries", ThisKey="FleetSeriesID", OtherKey="FleetSeriesID")]
		public EntitySet<SS_RaceSery> SS_RaceSeries
		{
			get
			{
				return this._SS_RaceSeries;
			}
			set
			{
				this._SS_RaceSeries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Prize_SS_FleetSery", Storage="_SS_Prize", ThisKey="PrizeID", OtherKey="PrizeID", IsForeignKey=true)]
		public SS_Prize SS_Prize
		{
			get
			{
				return this._SS_Prize.Entity;
			}
			set
			{
				SS_Prize previousValue = this._SS_Prize.Entity;
				if (((previousValue != value) 
							|| (this._SS_Prize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Prize.Entity = null;
						previousValue.SS_FleetSeries.Remove(this);
					}
					this._SS_Prize.Entity = value;
					if ((value != null))
					{
						value.SS_FleetSeries.Add(this);
						this._PrizeID = value.PrizeID;
					}
					else
					{
						this._PrizeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SS_Prize");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_ScoreMethod_SS_FleetSery", Storage="_SS_ScoreMethod", ThisKey="ScoreMethodID", OtherKey="ScoreMethodID", IsForeignKey=true)]
		public SS_ScoreMethod SS_ScoreMethod
		{
			get
			{
				return this._SS_ScoreMethod.Entity;
			}
			set
			{
				SS_ScoreMethod previousValue = this._SS_ScoreMethod.Entity;
				if (((previousValue != value) 
							|| (this._SS_ScoreMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_ScoreMethod.Entity = null;
						previousValue.SS_FleetSeries.Remove(this);
					}
					this._SS_ScoreMethod.Entity = value;
					if ((value != null))
					{
						value.SS_FleetSeries.Add(this);
						this._ScoreMethodID = value.ScoreMethodID;
					}
					else
					{
						this._ScoreMethodID = default(int);
					}
					this.SendPropertyChanged("SS_ScoreMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Sery_SS_FleetSery", Storage="_SS_Sery", ThisKey="SeriesID", OtherKey="SeriesID", IsForeignKey=true)]
		public SS_Sery SS_Sery
		{
			get
			{
				return this._SS_Sery.Entity;
			}
			set
			{
				SS_Sery previousValue = this._SS_Sery.Entity;
				if (((previousValue != value) 
							|| (this._SS_Sery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Sery.Entity = null;
						previousValue.SS_FleetSeries.Remove(this);
					}
					this._SS_Sery.Entity = value;
					if ((value != null))
					{
						value.SS_FleetSeries.Add(this);
						this._SeriesID = value.SeriesID;
					}
					else
					{
						this._SeriesID = default(int);
					}
					this.SendPropertyChanged("SS_Sery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Throwout_SS_FleetSery", Storage="_SS_Throwout", ThisKey="ThrowoutID", OtherKey="ThrowoutID", IsForeignKey=true)]
		public SS_Throwout SS_Throwout
		{
			get
			{
				return this._SS_Throwout.Entity;
			}
			set
			{
				SS_Throwout previousValue = this._SS_Throwout.Entity;
				if (((previousValue != value) 
							|| (this._SS_Throwout.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Throwout.Entity = null;
						previousValue.SS_FleetSeries.Remove(this);
					}
					this._SS_Throwout.Entity = value;
					if ((value != null))
					{
						value.SS_FleetSeries.Add(this);
						this._ThrowoutID = value.ThrowoutID;
					}
					else
					{
						this._ThrowoutID = default(int);
					}
					this.SendPropertyChanged("SS_Throwout");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Fleet_SS_FleetSery", Storage="_SS_Fleet", ThisKey="FleetID", OtherKey="FleetID", IsForeignKey=true)]
		public SS_Fleet SS_Fleet
		{
			get
			{
				return this._SS_Fleet.Entity;
			}
			set
			{
				SS_Fleet previousValue = this._SS_Fleet.Entity;
				if (((previousValue != value) 
							|| (this._SS_Fleet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Fleet.Entity = null;
						previousValue.SS_FleetSeries.Remove(this);
					}
					this._SS_Fleet.Entity = value;
					if ((value != null))
					{
						value.SS_FleetSeries.Add(this);
						this._FleetID = value.FleetID;
					}
					else
					{
						this._FleetID = default(int);
					}
					this.SendPropertyChanged("SS_Fleet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_FleetSery", Storage="_SS_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public SS_Season SS_Season
		{
			get
			{
				return this._SS_Season.Entity;
			}
			set
			{
				SS_Season previousValue = this._SS_Season.Entity;
				if (((previousValue != value) 
							|| (this._SS_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Season.Entity = null;
						previousValue.SS_FleetSeries.Remove(this);
					}
					this._SS_Season.Entity = value;
					if ((value != null))
					{
						value.SS_FleetSeries.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("SS_Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_Registrations(SS_Registration entity)
		{
			this.SendPropertyChanging();
			entity.SS_FleetSery = this;
		}
		
		private void detach_SS_Registrations(SS_Registration entity)
		{
			this.SendPropertyChanging();
			entity.SS_FleetSery = null;
		}
		
		private void attach_SS_Results(SS_Result entity)
		{
			this.SendPropertyChanging();
			entity.SS_FleetSery = this;
		}
		
		private void detach_SS_Results(SS_Result entity)
		{
			this.SendPropertyChanging();
			entity.SS_FleetSery = null;
		}
		
		private void attach_SS_ResultSummaries(SS_ResultSummary entity)
		{
			this.SendPropertyChanging();
			entity.SS_FleetSery = this;
		}
		
		private void detach_SS_ResultSummaries(SS_ResultSummary entity)
		{
			this.SendPropertyChanging();
			entity.SS_FleetSery = null;
		}
		
		private void attach_SS_RaceSeries(SS_RaceSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_FleetSery = this;
		}
		
		private void detach_SS_RaceSeries(SS_RaceSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_FleetSery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Fleet")]
	public partial class SS_Fleet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FleetID;
		
		private string _FleetName;
		
		private bool _IsActive;
		
		private string _Website;
		
		private int _ScheduleOrder;
		
		private int _ListOrder;
		
		private EntitySet<SS_RaceFleet> _SS_RaceFleets;
		
		private EntitySet<SS_FleetSery> _SS_FleetSeries;
		
		private EntitySet<SS_Boat> _SS_Boats;
		
		private EntitySet<SS_Trophy> _SS_Trophies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFleetIDChanging(int value);
    partial void OnFleetIDChanged();
    partial void OnFleetNameChanging(string value);
    partial void OnFleetNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnScheduleOrderChanging(int value);
    partial void OnScheduleOrderChanged();
    partial void OnListOrderChanging(int value);
    partial void OnListOrderChanged();
    #endregion
		
		public SS_Fleet()
		{
			this._SS_RaceFleets = new EntitySet<SS_RaceFleet>(new Action<SS_RaceFleet>(this.attach_SS_RaceFleets), new Action<SS_RaceFleet>(this.detach_SS_RaceFleets));
			this._SS_FleetSeries = new EntitySet<SS_FleetSery>(new Action<SS_FleetSery>(this.attach_SS_FleetSeries), new Action<SS_FleetSery>(this.detach_SS_FleetSeries));
			this._SS_Boats = new EntitySet<SS_Boat>(new Action<SS_Boat>(this.attach_SS_Boats), new Action<SS_Boat>(this.detach_SS_Boats));
			this._SS_Trophies = new EntitySet<SS_Trophy>(new Action<SS_Trophy>(this.attach_SS_Trophies), new Action<SS_Trophy>(this.detach_SS_Trophies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FleetID
		{
			get
			{
				return this._FleetID;
			}
			set
			{
				if ((this._FleetID != value))
				{
					this.OnFleetIDChanging(value);
					this.SendPropertyChanging();
					this._FleetID = value;
					this.SendPropertyChanged("FleetID");
					this.OnFleetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FleetName
		{
			get
			{
				return this._FleetName;
			}
			set
			{
				if ((this._FleetName != value))
				{
					this.OnFleetNameChanging(value);
					this.SendPropertyChanging();
					this._FleetName = value;
					this.SendPropertyChanged("FleetName");
					this.OnFleetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(128)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleOrder", DbType="Int NOT NULL")]
		public int ScheduleOrder
		{
			get
			{
				return this._ScheduleOrder;
			}
			set
			{
				if ((this._ScheduleOrder != value))
				{
					this.OnScheduleOrderChanging(value);
					this.SendPropertyChanging();
					this._ScheduleOrder = value;
					this.SendPropertyChanged("ScheduleOrder");
					this.OnScheduleOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListOrder", DbType="Int NOT NULL")]
		public int ListOrder
		{
			get
			{
				return this._ListOrder;
			}
			set
			{
				if ((this._ListOrder != value))
				{
					this.OnListOrderChanging(value);
					this.SendPropertyChanging();
					this._ListOrder = value;
					this.SendPropertyChanged("ListOrder");
					this.OnListOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Fleet_SS_RaceFleet", Storage="_SS_RaceFleets", ThisKey="FleetID", OtherKey="FleetID")]
		public EntitySet<SS_RaceFleet> SS_RaceFleets
		{
			get
			{
				return this._SS_RaceFleets;
			}
			set
			{
				this._SS_RaceFleets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Fleet_SS_FleetSery", Storage="_SS_FleetSeries", ThisKey="FleetID", OtherKey="FleetID")]
		public EntitySet<SS_FleetSery> SS_FleetSeries
		{
			get
			{
				return this._SS_FleetSeries;
			}
			set
			{
				this._SS_FleetSeries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Fleet_SS_Boat", Storage="_SS_Boats", ThisKey="FleetID", OtherKey="FleetID")]
		public EntitySet<SS_Boat> SS_Boats
		{
			get
			{
				return this._SS_Boats;
			}
			set
			{
				this._SS_Boats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Fleet_SS_Trophy", Storage="_SS_Trophies", ThisKey="FleetID", OtherKey="FleetID")]
		public EntitySet<SS_Trophy> SS_Trophies
		{
			get
			{
				return this._SS_Trophies;
			}
			set
			{
				this._SS_Trophies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_RaceFleets(SS_RaceFleet entity)
		{
			this.SendPropertyChanging();
			entity.SS_Fleet = this;
		}
		
		private void detach_SS_RaceFleets(SS_RaceFleet entity)
		{
			this.SendPropertyChanging();
			entity.SS_Fleet = null;
		}
		
		private void attach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Fleet = this;
		}
		
		private void detach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Fleet = null;
		}
		
		private void attach_SS_Boats(SS_Boat entity)
		{
			this.SendPropertyChanging();
			entity.SS_Fleet = this;
		}
		
		private void detach_SS_Boats(SS_Boat entity)
		{
			this.SendPropertyChanging();
			entity.SS_Fleet = null;
		}
		
		private void attach_SS_Trophies(SS_Trophy entity)
		{
			this.SendPropertyChanging();
			entity.SS_Fleet = this;
		}
		
		private void detach_SS_Trophies(SS_Trophy entity)
		{
			this.SendPropertyChanging();
			entity.SS_Fleet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<SS_BoatOwner> _SS_BoatOwners;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._SS_BoatOwners = new EntitySet<SS_BoatOwner>(new Action<SS_BoatOwner>(this.attach_SS_BoatOwners), new Action<SS_BoatOwner>(this.detach_SS_BoatOwners));
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_SS_BoatOwner", Storage="_SS_BoatOwners", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<SS_BoatOwner> SS_BoatOwners
		{
			get
			{
				return this._SS_BoatOwners;
			}
			set
			{
				this._SS_BoatOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_BoatOwners(SS_BoatOwner entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_SS_BoatOwners(SS_BoatOwner entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Boat")]
	public partial class SS_Boat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BoatID;
		
		private int _FleetID;
		
		private string _BoatName;
		
		private string _SailNumber;
		
		private string _Skipper;
		
		private string _Crew;
		
		private bool _IsActive;
		
		private bool _IsClubBoat;
		
		private System.Nullable<long> _BoatOrder;
		
		private bool _IsRegistered;
		
		private EntitySet<SS_BoatOwner> _SS_BoatOwners;
		
		private EntitySet<SS_Registration> _SS_Registrations;
		
		private EntitySet<SS_Score> _SS_Scores;
		
		private EntitySet<SS_Result> _SS_Results;
		
		private EntitySet<SS_ResultSummary> _SS_ResultSummaries;
		
		private EntityRef<SS_Fleet> _SS_Fleet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBoatIDChanging(int value);
    partial void OnBoatIDChanged();
    partial void OnFleetIDChanging(int value);
    partial void OnFleetIDChanged();
    partial void OnBoatNameChanging(string value);
    partial void OnBoatNameChanged();
    partial void OnSailNumberChanging(string value);
    partial void OnSailNumberChanged();
    partial void OnSkipperChanging(string value);
    partial void OnSkipperChanged();
    partial void OnCrewChanging(string value);
    partial void OnCrewChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsClubBoatChanging(bool value);
    partial void OnIsClubBoatChanged();
    partial void OnBoatOrderChanging(System.Nullable<long> value);
    partial void OnBoatOrderChanged();
    partial void OnIsRegisteredChanging(bool value);
    partial void OnIsRegisteredChanged();
    #endregion
		
		public SS_Boat()
		{
			this._SS_BoatOwners = new EntitySet<SS_BoatOwner>(new Action<SS_BoatOwner>(this.attach_SS_BoatOwners), new Action<SS_BoatOwner>(this.detach_SS_BoatOwners));
			this._SS_Registrations = new EntitySet<SS_Registration>(new Action<SS_Registration>(this.attach_SS_Registrations), new Action<SS_Registration>(this.detach_SS_Registrations));
			this._SS_Scores = new EntitySet<SS_Score>(new Action<SS_Score>(this.attach_SS_Scores), new Action<SS_Score>(this.detach_SS_Scores));
			this._SS_Results = new EntitySet<SS_Result>(new Action<SS_Result>(this.attach_SS_Results), new Action<SS_Result>(this.detach_SS_Results));
			this._SS_ResultSummaries = new EntitySet<SS_ResultSummary>(new Action<SS_ResultSummary>(this.attach_SS_ResultSummaries), new Action<SS_ResultSummary>(this.detach_SS_ResultSummaries));
			this._SS_Fleet = default(EntityRef<SS_Fleet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BoatID
		{
			get
			{
				return this._BoatID;
			}
			set
			{
				if ((this._BoatID != value))
				{
					this.OnBoatIDChanging(value);
					this.SendPropertyChanging();
					this._BoatID = value;
					this.SendPropertyChanged("BoatID");
					this.OnBoatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetID", DbType="Int NOT NULL")]
		public int FleetID
		{
			get
			{
				return this._FleetID;
			}
			set
			{
				if ((this._FleetID != value))
				{
					if (this._SS_Fleet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetIDChanging(value);
					this.SendPropertyChanging();
					this._FleetID = value;
					this.SendPropertyChanged("FleetID");
					this.OnFleetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatName", DbType="NVarChar(50)")]
		public string BoatName
		{
			get
			{
				return this._BoatName;
			}
			set
			{
				if ((this._BoatName != value))
				{
					this.OnBoatNameChanging(value);
					this.SendPropertyChanging();
					this._BoatName = value;
					this.SendPropertyChanged("BoatName");
					this.OnBoatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SailNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SailNumber
		{
			get
			{
				return this._SailNumber;
			}
			set
			{
				if ((this._SailNumber != value))
				{
					this.OnSailNumberChanging(value);
					this.SendPropertyChanging();
					this._SailNumber = value;
					this.SendPropertyChanged("SailNumber");
					this.OnSailNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skipper", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Skipper
		{
			get
			{
				return this._Skipper;
			}
			set
			{
				if ((this._Skipper != value))
				{
					this.OnSkipperChanging(value);
					this.SendPropertyChanging();
					this._Skipper = value;
					this.SendPropertyChanged("Skipper");
					this.OnSkipperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crew", DbType="NVarChar(100)")]
		public string Crew
		{
			get
			{
				return this._Crew;
			}
			set
			{
				if ((this._Crew != value))
				{
					this.OnCrewChanging(value);
					this.SendPropertyChanging();
					this._Crew = value;
					this.SendPropertyChanged("Crew");
					this.OnCrewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClubBoat", DbType="Bit NOT NULL")]
		public bool IsClubBoat
		{
			get
			{
				return this._IsClubBoat;
			}
			set
			{
				if ((this._IsClubBoat != value))
				{
					this.OnIsClubBoatChanging(value);
					this.SendPropertyChanging();
					this._IsClubBoat = value;
					this.SendPropertyChanged("IsClubBoat");
					this.OnIsClubBoatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatOrder", AutoSync=AutoSync.Always, DbType="BigInt", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BoatOrder
		{
			get
			{
				return this._BoatOrder;
			}
			set
			{
				if ((this._BoatOrder != value))
				{
					this.OnBoatOrderChanging(value);
					this.SendPropertyChanging();
					this._BoatOrder = value;
					this.SendPropertyChanged("BoatOrder");
					this.OnBoatOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRegistered", DbType="Bit NOT NULL")]
		public bool IsRegistered
		{
			get
			{
				return this._IsRegistered;
			}
			set
			{
				if ((this._IsRegistered != value))
				{
					this.OnIsRegisteredChanging(value);
					this.SendPropertyChanging();
					this._IsRegistered = value;
					this.SendPropertyChanged("IsRegistered");
					this.OnIsRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_BoatOwner", Storage="_SS_BoatOwners", ThisKey="BoatID", OtherKey="BoatID")]
		public EntitySet<SS_BoatOwner> SS_BoatOwners
		{
			get
			{
				return this._SS_BoatOwners;
			}
			set
			{
				this._SS_BoatOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_Registration", Storage="_SS_Registrations", ThisKey="BoatID", OtherKey="BoatID")]
		public EntitySet<SS_Registration> SS_Registrations
		{
			get
			{
				return this._SS_Registrations;
			}
			set
			{
				this._SS_Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_Score", Storage="_SS_Scores", ThisKey="BoatID", OtherKey="BoatID")]
		public EntitySet<SS_Score> SS_Scores
		{
			get
			{
				return this._SS_Scores;
			}
			set
			{
				this._SS_Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_Result", Storage="_SS_Results", ThisKey="BoatID", OtherKey="BoatID")]
		public EntitySet<SS_Result> SS_Results
		{
			get
			{
				return this._SS_Results;
			}
			set
			{
				this._SS_Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_ResultSummary", Storage="_SS_ResultSummaries", ThisKey="BoatID", OtherKey="BoatID")]
		public EntitySet<SS_ResultSummary> SS_ResultSummaries
		{
			get
			{
				return this._SS_ResultSummaries;
			}
			set
			{
				this._SS_ResultSummaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Fleet_SS_Boat", Storage="_SS_Fleet", ThisKey="FleetID", OtherKey="FleetID", IsForeignKey=true)]
		public SS_Fleet SS_Fleet
		{
			get
			{
				return this._SS_Fleet.Entity;
			}
			set
			{
				SS_Fleet previousValue = this._SS_Fleet.Entity;
				if (((previousValue != value) 
							|| (this._SS_Fleet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Fleet.Entity = null;
						previousValue.SS_Boats.Remove(this);
					}
					this._SS_Fleet.Entity = value;
					if ((value != null))
					{
						value.SS_Boats.Add(this);
						this._FleetID = value.FleetID;
					}
					else
					{
						this._FleetID = default(int);
					}
					this.SendPropertyChanged("SS_Fleet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_BoatOwners(SS_BoatOwner entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = this;
		}
		
		private void detach_SS_BoatOwners(SS_BoatOwner entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = null;
		}
		
		private void attach_SS_Registrations(SS_Registration entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = this;
		}
		
		private void detach_SS_Registrations(SS_Registration entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = null;
		}
		
		private void attach_SS_Scores(SS_Score entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = this;
		}
		
		private void detach_SS_Scores(SS_Score entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = null;
		}
		
		private void attach_SS_Results(SS_Result entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = this;
		}
		
		private void detach_SS_Results(SS_Result entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = null;
		}
		
		private void attach_SS_ResultSummaries(SS_ResultSummary entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = this;
		}
		
		private void detach_SS_ResultSummaries(SS_ResultSummary entity)
		{
			this.SendPropertyChanging();
			entity.SS_Boat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_User")]
	public partial class SS_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private bool _IsEncryptedPwd;
		
		private string _Email;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private EntitySet<SS_UserRole> _SS_UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsEncryptedPwdChanging(bool value);
    partial void OnIsEncryptedPwdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    #endregion
		
		public SS_User()
		{
			this._SS_UserRoles = new EntitySet<SS_UserRole>(new Action<SS_UserRole>(this.attach_SS_UserRoles), new Action<SS_UserRole>(this.detach_SS_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEncryptedPwd", DbType="Bit NOT NULL")]
		public bool IsEncryptedPwd
		{
			get
			{
				return this._IsEncryptedPwd;
			}
			set
			{
				if ((this._IsEncryptedPwd != value))
				{
					this.OnIsEncryptedPwdChanging(value);
					this.SendPropertyChanging();
					this._IsEncryptedPwd = value;
					this.SendPropertyChanged("IsEncryptedPwd");
					this.OnIsEncryptedPwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50)")]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(50)")]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_User_SS_UserRole", Storage="_SS_UserRoles", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<SS_UserRole> SS_UserRoles
		{
			get
			{
				return this._SS_UserRoles;
			}
			set
			{
				this._SS_UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_UserRoles(SS_UserRole entity)
		{
			this.SendPropertyChanging();
			entity.SS_User = this;
		}
		
		private void detach_SS_UserRoles(SS_UserRole entity)
		{
			this.SendPropertyChanging();
			entity.SS_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_UserRole")]
	public partial class SS_UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRoleID;
		
		private int _UserID;
		
		private int _RoleID;
		
		private EntityRef<SS_User> _SS_User;
		
		private EntityRef<SS_Role> _SS_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public SS_UserRole()
		{
			this._SS_User = default(EntityRef<SS_User>);
			this._SS_Role = default(EntityRef<SS_Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SS_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._SS_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_User_SS_UserRole", Storage="_SS_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SS_User SS_User
		{
			get
			{
				return this._SS_User.Entity;
			}
			set
			{
				SS_User previousValue = this._SS_User.Entity;
				if (((previousValue != value) 
							|| (this._SS_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_User.Entity = null;
						previousValue.SS_UserRoles.Remove(this);
					}
					this._SS_User.Entity = value;
					if ((value != null))
					{
						value.SS_UserRoles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("SS_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Role_SS_UserRole", Storage="_SS_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SS_Role SS_Role
		{
			get
			{
				return this._SS_Role.Entity;
			}
			set
			{
				SS_Role previousValue = this._SS_Role.Entity;
				if (((previousValue != value) 
							|| (this._SS_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Role.Entity = null;
						previousValue.SS_UserRoles.Remove(this);
					}
					this._SS_Role.Entity = value;
					if ((value != null))
					{
						value.SS_UserRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("SS_Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Role")]
	public partial class SS_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private EntitySet<SS_UserRole> _SS_UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public SS_Role()
		{
			this._SS_UserRoles = new EntitySet<SS_UserRole>(new Action<SS_UserRole>(this.attach_SS_UserRoles), new Action<SS_UserRole>(this.detach_SS_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Role_SS_UserRole", Storage="_SS_UserRoles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<SS_UserRole> SS_UserRoles
		{
			get
			{
				return this._SS_UserRoles;
			}
			set
			{
				this._SS_UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_UserRoles(SS_UserRole entity)
		{
			this.SendPropertyChanging();
			entity.SS_Role = this;
		}
		
		private void detach_SS_UserRoles(SS_UserRole entity)
		{
			this.SendPropertyChanging();
			entity.SS_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Result")]
	public partial class SS_Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultID;
		
		private int _SeasonID;
		
		private int _FleetSeriesID;
		
		private int _BoatID;
		
		private System.Nullable<int> _PenaltyID;
		
		private string _SailNumber;
		
		private int _RaceNumber;
		
		private System.Nullable<int> _FinishPlace;
		
		private double _Points;
		
		private string _PenaltyName;
		
		private bool _IsNonPenalty;
		
		private bool _IsThrowout;
		
		private bool _CanThrowout;
		
		private bool _IsAbandoned;
		
		private bool _IsAbsent;
		
		private EntityRef<SS_Boat> _SS_Boat;
		
		private EntityRef<SS_FleetSery> _SS_FleetSery;
		
		private EntityRef<SS_Penalty> _SS_Penalty;
		
		private EntityRef<SS_Season> _SS_Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnFleetSeriesIDChanging(int value);
    partial void OnFleetSeriesIDChanged();
    partial void OnBoatIDChanging(int value);
    partial void OnBoatIDChanged();
    partial void OnPenaltyIDChanging(System.Nullable<int> value);
    partial void OnPenaltyIDChanged();
    partial void OnSailNumberChanging(string value);
    partial void OnSailNumberChanged();
    partial void OnRaceNumberChanging(int value);
    partial void OnRaceNumberChanged();
    partial void OnFinishPlaceChanging(System.Nullable<int> value);
    partial void OnFinishPlaceChanged();
    partial void OnPointsChanging(double value);
    partial void OnPointsChanged();
    partial void OnPenaltyNameChanging(string value);
    partial void OnPenaltyNameChanged();
    partial void OnIsNonPenaltyChanging(bool value);
    partial void OnIsNonPenaltyChanged();
    partial void OnIsThrowoutChanging(bool value);
    partial void OnIsThrowoutChanged();
    partial void OnCanThrowoutChanging(bool value);
    partial void OnCanThrowoutChanged();
    partial void OnIsAbandonedChanging(bool value);
    partial void OnIsAbandonedChanged();
    partial void OnIsAbsentChanging(bool value);
    partial void OnIsAbsentChanged();
    #endregion
		
		public SS_Result()
		{
			this._SS_Boat = default(EntityRef<SS_Boat>);
			this._SS_FleetSery = default(EntityRef<SS_FleetSery>);
			this._SS_Penalty = default(EntityRef<SS_Penalty>);
			this._SS_Season = default(EntityRef<SS_Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._SS_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetSeriesID", DbType="Int NOT NULL")]
		public int FleetSeriesID
		{
			get
			{
				return this._FleetSeriesID;
			}
			set
			{
				if ((this._FleetSeriesID != value))
				{
					if (this._SS_FleetSery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._FleetSeriesID = value;
					this.SendPropertyChanged("FleetSeriesID");
					this.OnFleetSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatID", DbType="Int NOT NULL")]
		public int BoatID
		{
			get
			{
				return this._BoatID;
			}
			set
			{
				if ((this._BoatID != value))
				{
					if (this._SS_Boat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoatIDChanging(value);
					this.SendPropertyChanging();
					this._BoatID = value;
					this.SendPropertyChanged("BoatID");
					this.OnBoatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PenaltyID", DbType="Int")]
		public System.Nullable<int> PenaltyID
		{
			get
			{
				return this._PenaltyID;
			}
			set
			{
				if ((this._PenaltyID != value))
				{
					if (this._SS_Penalty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPenaltyIDChanging(value);
					this.SendPropertyChanging();
					this._PenaltyID = value;
					this.SendPropertyChanged("PenaltyID");
					this.OnPenaltyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SailNumber", DbType="NVarChar(50)")]
		public string SailNumber
		{
			get
			{
				return this._SailNumber;
			}
			set
			{
				if ((this._SailNumber != value))
				{
					this.OnSailNumberChanging(value);
					this.SendPropertyChanging();
					this._SailNumber = value;
					this.SendPropertyChanged("SailNumber");
					this.OnSailNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceNumber", DbType="Int NOT NULL")]
		public int RaceNumber
		{
			get
			{
				return this._RaceNumber;
			}
			set
			{
				if ((this._RaceNumber != value))
				{
					this.OnRaceNumberChanging(value);
					this.SendPropertyChanging();
					this._RaceNumber = value;
					this.SendPropertyChanged("RaceNumber");
					this.OnRaceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishPlace", DbType="Int")]
		public System.Nullable<int> FinishPlace
		{
			get
			{
				return this._FinishPlace;
			}
			set
			{
				if ((this._FinishPlace != value))
				{
					this.OnFinishPlaceChanging(value);
					this.SendPropertyChanging();
					this._FinishPlace = value;
					this.SendPropertyChanged("FinishPlace");
					this.OnFinishPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Float NOT NULL")]
		public double Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PenaltyName", DbType="NVarChar(20)")]
		public string PenaltyName
		{
			get
			{
				return this._PenaltyName;
			}
			set
			{
				if ((this._PenaltyName != value))
				{
					this.OnPenaltyNameChanging(value);
					this.SendPropertyChanging();
					this._PenaltyName = value;
					this.SendPropertyChanged("PenaltyName");
					this.OnPenaltyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNonPenalty", DbType="Bit NOT NULL")]
		public bool IsNonPenalty
		{
			get
			{
				return this._IsNonPenalty;
			}
			set
			{
				if ((this._IsNonPenalty != value))
				{
					this.OnIsNonPenaltyChanging(value);
					this.SendPropertyChanging();
					this._IsNonPenalty = value;
					this.SendPropertyChanged("IsNonPenalty");
					this.OnIsNonPenaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsThrowout", DbType="Bit NOT NULL")]
		public bool IsThrowout
		{
			get
			{
				return this._IsThrowout;
			}
			set
			{
				if ((this._IsThrowout != value))
				{
					this.OnIsThrowoutChanging(value);
					this.SendPropertyChanging();
					this._IsThrowout = value;
					this.SendPropertyChanged("IsThrowout");
					this.OnIsThrowoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanThrowout", DbType="Bit NOT NULL")]
		public bool CanThrowout
		{
			get
			{
				return this._CanThrowout;
			}
			set
			{
				if ((this._CanThrowout != value))
				{
					this.OnCanThrowoutChanging(value);
					this.SendPropertyChanging();
					this._CanThrowout = value;
					this.SendPropertyChanged("CanThrowout");
					this.OnCanThrowoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAbandoned", DbType="Bit NOT NULL")]
		public bool IsAbandoned
		{
			get
			{
				return this._IsAbandoned;
			}
			set
			{
				if ((this._IsAbandoned != value))
				{
					this.OnIsAbandonedChanging(value);
					this.SendPropertyChanging();
					this._IsAbandoned = value;
					this.SendPropertyChanged("IsAbandoned");
					this.OnIsAbandonedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAbsent", DbType="Bit NOT NULL")]
		public bool IsAbsent
		{
			get
			{
				return this._IsAbsent;
			}
			set
			{
				if ((this._IsAbsent != value))
				{
					this.OnIsAbsentChanging(value);
					this.SendPropertyChanging();
					this._IsAbsent = value;
					this.SendPropertyChanged("IsAbsent");
					this.OnIsAbsentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_Result", Storage="_SS_Boat", ThisKey="BoatID", OtherKey="BoatID", IsForeignKey=true)]
		public SS_Boat SS_Boat
		{
			get
			{
				return this._SS_Boat.Entity;
			}
			set
			{
				SS_Boat previousValue = this._SS_Boat.Entity;
				if (((previousValue != value) 
							|| (this._SS_Boat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Boat.Entity = null;
						previousValue.SS_Results.Remove(this);
					}
					this._SS_Boat.Entity = value;
					if ((value != null))
					{
						value.SS_Results.Add(this);
						this._BoatID = value.BoatID;
					}
					else
					{
						this._BoatID = default(int);
					}
					this.SendPropertyChanged("SS_Boat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_FleetSery_SS_Result", Storage="_SS_FleetSery", ThisKey="FleetSeriesID", OtherKey="FleetSeriesID", IsForeignKey=true)]
		public SS_FleetSery SS_FleetSery
		{
			get
			{
				return this._SS_FleetSery.Entity;
			}
			set
			{
				SS_FleetSery previousValue = this._SS_FleetSery.Entity;
				if (((previousValue != value) 
							|| (this._SS_FleetSery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_FleetSery.Entity = null;
						previousValue.SS_Results.Remove(this);
					}
					this._SS_FleetSery.Entity = value;
					if ((value != null))
					{
						value.SS_Results.Add(this);
						this._FleetSeriesID = value.FleetSeriesID;
					}
					else
					{
						this._FleetSeriesID = default(int);
					}
					this.SendPropertyChanged("SS_FleetSery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Penalty_SS_Result", Storage="_SS_Penalty", ThisKey="PenaltyID", OtherKey="PenaltyID", IsForeignKey=true)]
		public SS_Penalty SS_Penalty
		{
			get
			{
				return this._SS_Penalty.Entity;
			}
			set
			{
				SS_Penalty previousValue = this._SS_Penalty.Entity;
				if (((previousValue != value) 
							|| (this._SS_Penalty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Penalty.Entity = null;
						previousValue.SS_Results.Remove(this);
					}
					this._SS_Penalty.Entity = value;
					if ((value != null))
					{
						value.SS_Results.Add(this);
						this._PenaltyID = value.PenaltyID;
					}
					else
					{
						this._PenaltyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SS_Penalty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_Result", Storage="_SS_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public SS_Season SS_Season
		{
			get
			{
				return this._SS_Season.Entity;
			}
			set
			{
				SS_Season previousValue = this._SS_Season.Entity;
				if (((previousValue != value) 
							|| (this._SS_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Season.Entity = null;
						previousValue.SS_Results.Remove(this);
					}
					this._SS_Season.Entity = value;
					if ((value != null))
					{
						value.SS_Results.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("SS_Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Penalty")]
	public partial class SS_Penalty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PenaltyID;
		
		private string _PenaltyName;
		
		private string _Description;
		
		private double _PenaltyRate;
		
		private bool _IsNonPenalty;
		
		private bool _IsDisqualified;
		
		private bool _IsExcludable;
		
		private bool _IsLastPlusOne;
		
		private bool _IsLastPlusTwo;
		
		private bool _IsOverridePoints;
		
		private bool _UsePlace;
		
		private bool _IsDoublePoints;
		
		private EntitySet<SS_Score> _SS_Scores;
		
		private EntitySet<SS_Result> _SS_Results;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPenaltyIDChanging(int value);
    partial void OnPenaltyIDChanged();
    partial void OnPenaltyNameChanging(string value);
    partial void OnPenaltyNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPenaltyRateChanging(double value);
    partial void OnPenaltyRateChanged();
    partial void OnIsNonPenaltyChanging(bool value);
    partial void OnIsNonPenaltyChanged();
    partial void OnIsDisqualifiedChanging(bool value);
    partial void OnIsDisqualifiedChanged();
    partial void OnIsExcludableChanging(bool value);
    partial void OnIsExcludableChanged();
    partial void OnIsLastPlusOneChanging(bool value);
    partial void OnIsLastPlusOneChanged();
    partial void OnIsLastPlusTwoChanging(bool value);
    partial void OnIsLastPlusTwoChanged();
    partial void OnIsOverridePointsChanging(bool value);
    partial void OnIsOverridePointsChanged();
    partial void OnUsePlaceChanging(bool value);
    partial void OnUsePlaceChanged();
    partial void OnIsDoublePointsChanging(bool value);
    partial void OnIsDoublePointsChanged();
    #endregion
		
		public SS_Penalty()
		{
			this._SS_Scores = new EntitySet<SS_Score>(new Action<SS_Score>(this.attach_SS_Scores), new Action<SS_Score>(this.detach_SS_Scores));
			this._SS_Results = new EntitySet<SS_Result>(new Action<SS_Result>(this.attach_SS_Results), new Action<SS_Result>(this.detach_SS_Results));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PenaltyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PenaltyID
		{
			get
			{
				return this._PenaltyID;
			}
			set
			{
				if ((this._PenaltyID != value))
				{
					this.OnPenaltyIDChanging(value);
					this.SendPropertyChanging();
					this._PenaltyID = value;
					this.SendPropertyChanged("PenaltyID");
					this.OnPenaltyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PenaltyName", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string PenaltyName
		{
			get
			{
				return this._PenaltyName;
			}
			set
			{
				if ((this._PenaltyName != value))
				{
					this.OnPenaltyNameChanging(value);
					this.SendPropertyChanging();
					this._PenaltyName = value;
					this.SendPropertyChanged("PenaltyName");
					this.OnPenaltyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PenaltyRate", DbType="Float NOT NULL")]
		public double PenaltyRate
		{
			get
			{
				return this._PenaltyRate;
			}
			set
			{
				if ((this._PenaltyRate != value))
				{
					this.OnPenaltyRateChanging(value);
					this.SendPropertyChanging();
					this._PenaltyRate = value;
					this.SendPropertyChanged("PenaltyRate");
					this.OnPenaltyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNonPenalty", DbType="Bit NOT NULL")]
		public bool IsNonPenalty
		{
			get
			{
				return this._IsNonPenalty;
			}
			set
			{
				if ((this._IsNonPenalty != value))
				{
					this.OnIsNonPenaltyChanging(value);
					this.SendPropertyChanging();
					this._IsNonPenalty = value;
					this.SendPropertyChanged("IsNonPenalty");
					this.OnIsNonPenaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisqualified", DbType="Bit NOT NULL")]
		public bool IsDisqualified
		{
			get
			{
				return this._IsDisqualified;
			}
			set
			{
				if ((this._IsDisqualified != value))
				{
					this.OnIsDisqualifiedChanging(value);
					this.SendPropertyChanging();
					this._IsDisqualified = value;
					this.SendPropertyChanged("IsDisqualified");
					this.OnIsDisqualifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExcludable", DbType="Bit NOT NULL")]
		public bool IsExcludable
		{
			get
			{
				return this._IsExcludable;
			}
			set
			{
				if ((this._IsExcludable != value))
				{
					this.OnIsExcludableChanging(value);
					this.SendPropertyChanging();
					this._IsExcludable = value;
					this.SendPropertyChanged("IsExcludable");
					this.OnIsExcludableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLastPlusOne", DbType="Bit NOT NULL")]
		public bool IsLastPlusOne
		{
			get
			{
				return this._IsLastPlusOne;
			}
			set
			{
				if ((this._IsLastPlusOne != value))
				{
					this.OnIsLastPlusOneChanging(value);
					this.SendPropertyChanging();
					this._IsLastPlusOne = value;
					this.SendPropertyChanged("IsLastPlusOne");
					this.OnIsLastPlusOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLastPlusTwo", DbType="Bit NOT NULL")]
		public bool IsLastPlusTwo
		{
			get
			{
				return this._IsLastPlusTwo;
			}
			set
			{
				if ((this._IsLastPlusTwo != value))
				{
					this.OnIsLastPlusTwoChanging(value);
					this.SendPropertyChanging();
					this._IsLastPlusTwo = value;
					this.SendPropertyChanged("IsLastPlusTwo");
					this.OnIsLastPlusTwoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOverridePoints", DbType="Bit NOT NULL")]
		public bool IsOverridePoints
		{
			get
			{
				return this._IsOverridePoints;
			}
			set
			{
				if ((this._IsOverridePoints != value))
				{
					this.OnIsOverridePointsChanging(value);
					this.SendPropertyChanging();
					this._IsOverridePoints = value;
					this.SendPropertyChanged("IsOverridePoints");
					this.OnIsOverridePointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePlace", DbType="Bit NOT NULL")]
		public bool UsePlace
		{
			get
			{
				return this._UsePlace;
			}
			set
			{
				if ((this._UsePlace != value))
				{
					this.OnUsePlaceChanging(value);
					this.SendPropertyChanging();
					this._UsePlace = value;
					this.SendPropertyChanged("UsePlace");
					this.OnUsePlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDoublePoints", DbType="Bit NOT NULL")]
		public bool IsDoublePoints
		{
			get
			{
				return this._IsDoublePoints;
			}
			set
			{
				if ((this._IsDoublePoints != value))
				{
					this.OnIsDoublePointsChanging(value);
					this.SendPropertyChanging();
					this._IsDoublePoints = value;
					this.SendPropertyChanged("IsDoublePoints");
					this.OnIsDoublePointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Penalty_SS_Score", Storage="_SS_Scores", ThisKey="PenaltyID", OtherKey="PenaltyID")]
		public EntitySet<SS_Score> SS_Scores
		{
			get
			{
				return this._SS_Scores;
			}
			set
			{
				this._SS_Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Penalty_SS_Result", Storage="_SS_Results", ThisKey="PenaltyID", OtherKey="PenaltyID")]
		public EntitySet<SS_Result> SS_Results
		{
			get
			{
				return this._SS_Results;
			}
			set
			{
				this._SS_Results.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_Scores(SS_Score entity)
		{
			this.SendPropertyChanging();
			entity.SS_Penalty = this;
		}
		
		private void detach_SS_Scores(SS_Score entity)
		{
			this.SendPropertyChanging();
			entity.SS_Penalty = null;
		}
		
		private void attach_SS_Results(SS_Result entity)
		{
			this.SendPropertyChanging();
			entity.SS_Penalty = this;
		}
		
		private void detach_SS_Results(SS_Result entity)
		{
			this.SendPropertyChanging();
			entity.SS_Penalty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_ResultSummary")]
	public partial class SS_ResultSummary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultSummaryID;
		
		private int _SeasonID;
		
		private int _FleetSeriesID;
		
		private string _FleetName;
		
		private string _SeriesName;
		
		private int _BoatID;
		
		private string _SailNumber;
		
		private string _BoatName;
		
		private bool _IsRegisteredBoat;
		
		private string _Skipper;
		
		private string _Crew;
		
		private double _TotalPoints;
		
		private string _TieBreakerStr;
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private System.Nullable<int> _Position;
		
		private EntityRef<SS_Boat> _SS_Boat;
		
		private EntityRef<SS_FleetSery> _SS_FleetSery;
		
		private EntityRef<SS_Season> _SS_Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultSummaryIDChanging(int value);
    partial void OnResultSummaryIDChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnFleetSeriesIDChanging(int value);
    partial void OnFleetSeriesIDChanged();
    partial void OnFleetNameChanging(string value);
    partial void OnFleetNameChanged();
    partial void OnSeriesNameChanging(string value);
    partial void OnSeriesNameChanged();
    partial void OnBoatIDChanging(int value);
    partial void OnBoatIDChanged();
    partial void OnSailNumberChanging(string value);
    partial void OnSailNumberChanged();
    partial void OnBoatNameChanging(string value);
    partial void OnBoatNameChanged();
    partial void OnIsRegisteredBoatChanging(bool value);
    partial void OnIsRegisteredBoatChanged();
    partial void OnSkipperChanging(string value);
    partial void OnSkipperChanged();
    partial void OnCrewChanging(string value);
    partial void OnCrewChanged();
    partial void OnTotalPointsChanging(double value);
    partial void OnTotalPointsChanged();
    partial void OnTieBreakerStrChanging(string value);
    partial void OnTieBreakerStrChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnPositionChanging(System.Nullable<int> value);
    partial void OnPositionChanged();
    #endregion
		
		public SS_ResultSummary()
		{
			this._SS_Boat = default(EntityRef<SS_Boat>);
			this._SS_FleetSery = default(EntityRef<SS_FleetSery>);
			this._SS_Season = default(EntityRef<SS_Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultSummaryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultSummaryID
		{
			get
			{
				return this._ResultSummaryID;
			}
			set
			{
				if ((this._ResultSummaryID != value))
				{
					this.OnResultSummaryIDChanging(value);
					this.SendPropertyChanging();
					this._ResultSummaryID = value;
					this.SendPropertyChanged("ResultSummaryID");
					this.OnResultSummaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._SS_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetSeriesID", DbType="Int NOT NULL")]
		public int FleetSeriesID
		{
			get
			{
				return this._FleetSeriesID;
			}
			set
			{
				if ((this._FleetSeriesID != value))
				{
					if (this._SS_FleetSery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._FleetSeriesID = value;
					this.SendPropertyChanged("FleetSeriesID");
					this.OnFleetSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetName", DbType="NVarChar(50)")]
		public string FleetName
		{
			get
			{
				return this._FleetName;
			}
			set
			{
				if ((this._FleetName != value))
				{
					this.OnFleetNameChanging(value);
					this.SendPropertyChanging();
					this._FleetName = value;
					this.SendPropertyChanged("FleetName");
					this.OnFleetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesName", DbType="NVarChar(50)")]
		public string SeriesName
		{
			get
			{
				return this._SeriesName;
			}
			set
			{
				if ((this._SeriesName != value))
				{
					this.OnSeriesNameChanging(value);
					this.SendPropertyChanging();
					this._SeriesName = value;
					this.SendPropertyChanged("SeriesName");
					this.OnSeriesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatID", DbType="Int NOT NULL")]
		public int BoatID
		{
			get
			{
				return this._BoatID;
			}
			set
			{
				if ((this._BoatID != value))
				{
					if (this._SS_Boat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoatIDChanging(value);
					this.SendPropertyChanging();
					this._BoatID = value;
					this.SendPropertyChanged("BoatID");
					this.OnBoatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SailNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SailNumber
		{
			get
			{
				return this._SailNumber;
			}
			set
			{
				if ((this._SailNumber != value))
				{
					this.OnSailNumberChanging(value);
					this.SendPropertyChanging();
					this._SailNumber = value;
					this.SendPropertyChanged("SailNumber");
					this.OnSailNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatName", DbType="NVarChar(50)")]
		public string BoatName
		{
			get
			{
				return this._BoatName;
			}
			set
			{
				if ((this._BoatName != value))
				{
					this.OnBoatNameChanging(value);
					this.SendPropertyChanging();
					this._BoatName = value;
					this.SendPropertyChanged("BoatName");
					this.OnBoatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRegisteredBoat", DbType="Bit NOT NULL")]
		public bool IsRegisteredBoat
		{
			get
			{
				return this._IsRegisteredBoat;
			}
			set
			{
				if ((this._IsRegisteredBoat != value))
				{
					this.OnIsRegisteredBoatChanging(value);
					this.SendPropertyChanging();
					this._IsRegisteredBoat = value;
					this.SendPropertyChanged("IsRegisteredBoat");
					this.OnIsRegisteredBoatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skipper", DbType="NVarChar(50)")]
		public string Skipper
		{
			get
			{
				return this._Skipper;
			}
			set
			{
				if ((this._Skipper != value))
				{
					this.OnSkipperChanging(value);
					this.SendPropertyChanging();
					this._Skipper = value;
					this.SendPropertyChanged("Skipper");
					this.OnSkipperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crew", DbType="NVarChar(50)")]
		public string Crew
		{
			get
			{
				return this._Crew;
			}
			set
			{
				if ((this._Crew != value))
				{
					this.OnCrewChanging(value);
					this.SendPropertyChanging();
					this._Crew = value;
					this.SendPropertyChanged("Crew");
					this.OnCrewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPoints", DbType="Float NOT NULL")]
		public double TotalPoints
		{
			get
			{
				return this._TotalPoints;
			}
			set
			{
				if ((this._TotalPoints != value))
				{
					this.OnTotalPointsChanging(value);
					this.SendPropertyChanging();
					this._TotalPoints = value;
					this.SendPropertyChanged("TotalPoints");
					this.OnTotalPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TieBreakerStr", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string TieBreakerStr
		{
			get
			{
				return this._TieBreakerStr;
			}
			set
			{
				if ((this._TieBreakerStr != value))
				{
					this.OnTieBreakerStrChanging(value);
					this.SendPropertyChanging();
					this._TieBreakerStr = value;
					this.SendPropertyChanged("TieBreakerStr");
					this.OnTieBreakerStrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(20)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int")]
		public System.Nullable<int> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Boat_SS_ResultSummary", Storage="_SS_Boat", ThisKey="BoatID", OtherKey="BoatID", IsForeignKey=true)]
		public SS_Boat SS_Boat
		{
			get
			{
				return this._SS_Boat.Entity;
			}
			set
			{
				SS_Boat previousValue = this._SS_Boat.Entity;
				if (((previousValue != value) 
							|| (this._SS_Boat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Boat.Entity = null;
						previousValue.SS_ResultSummaries.Remove(this);
					}
					this._SS_Boat.Entity = value;
					if ((value != null))
					{
						value.SS_ResultSummaries.Add(this);
						this._BoatID = value.BoatID;
					}
					else
					{
						this._BoatID = default(int);
					}
					this.SendPropertyChanged("SS_Boat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_FleetSery_SS_ResultSummary", Storage="_SS_FleetSery", ThisKey="FleetSeriesID", OtherKey="FleetSeriesID", IsForeignKey=true)]
		public SS_FleetSery SS_FleetSery
		{
			get
			{
				return this._SS_FleetSery.Entity;
			}
			set
			{
				SS_FleetSery previousValue = this._SS_FleetSery.Entity;
				if (((previousValue != value) 
							|| (this._SS_FleetSery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_FleetSery.Entity = null;
						previousValue.SS_ResultSummaries.Remove(this);
					}
					this._SS_FleetSery.Entity = value;
					if ((value != null))
					{
						value.SS_ResultSummaries.Add(this);
						this._FleetSeriesID = value.FleetSeriesID;
					}
					else
					{
						this._FleetSeriesID = default(int);
					}
					this.SendPropertyChanged("SS_FleetSery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_ResultSummary", Storage="_SS_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public SS_Season SS_Season
		{
			get
			{
				return this._SS_Season.Entity;
			}
			set
			{
				SS_Season previousValue = this._SS_Season.Entity;
				if (((previousValue != value) 
							|| (this._SS_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Season.Entity = null;
						previousValue.SS_ResultSummaries.Remove(this);
					}
					this._SS_Season.Entity = value;
					if ((value != null))
					{
						value.SS_ResultSummaries.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("SS_Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Trophy")]
	public partial class SS_Trophy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrophyID;
		
		private string _TrophyName;
		
		private string _Donor;
		
		private int _SeriesID;
		
		private int _FleetID;
		
		private System.Nullable<int> _RaceNumber;
		
		private System.Nullable<int> _Place;
		
		private bool _ShiftToNext;
		
		private int _SeasonID;
		
		private bool _BestSeason;
		
		private string _Notes;
		
		private EntityRef<SS_Fleet> _SS_Fleet;
		
		private EntityRef<SS_Sery> _SS_Sery;
		
		private EntityRef<SS_Season> _SS_Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrophyIDChanging(int value);
    partial void OnTrophyIDChanged();
    partial void OnTrophyNameChanging(string value);
    partial void OnTrophyNameChanged();
    partial void OnDonorChanging(string value);
    partial void OnDonorChanged();
    partial void OnSeriesIDChanging(int value);
    partial void OnSeriesIDChanged();
    partial void OnFleetIDChanging(int value);
    partial void OnFleetIDChanged();
    partial void OnRaceNumberChanging(System.Nullable<int> value);
    partial void OnRaceNumberChanged();
    partial void OnPlaceChanging(System.Nullable<int> value);
    partial void OnPlaceChanged();
    partial void OnShiftToNextChanging(bool value);
    partial void OnShiftToNextChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnBestSeasonChanging(bool value);
    partial void OnBestSeasonChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public SS_Trophy()
		{
			this._SS_Fleet = default(EntityRef<SS_Fleet>);
			this._SS_Sery = default(EntityRef<SS_Sery>);
			this._SS_Season = default(EntityRef<SS_Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrophyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrophyID
		{
			get
			{
				return this._TrophyID;
			}
			set
			{
				if ((this._TrophyID != value))
				{
					this.OnTrophyIDChanging(value);
					this.SendPropertyChanging();
					this._TrophyID = value;
					this.SendPropertyChanged("TrophyID");
					this.OnTrophyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrophyName", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string TrophyName
		{
			get
			{
				return this._TrophyName;
			}
			set
			{
				if ((this._TrophyName != value))
				{
					this.OnTrophyNameChanging(value);
					this.SendPropertyChanging();
					this._TrophyName = value;
					this.SendPropertyChanged("TrophyName");
					this.OnTrophyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Donor", DbType="NVarChar(80)")]
		public string Donor
		{
			get
			{
				return this._Donor;
			}
			set
			{
				if ((this._Donor != value))
				{
					this.OnDonorChanging(value);
					this.SendPropertyChanging();
					this._Donor = value;
					this.SendPropertyChanged("Donor");
					this.OnDonorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesID", DbType="Int NOT NULL")]
		public int SeriesID
		{
			get
			{
				return this._SeriesID;
			}
			set
			{
				if ((this._SeriesID != value))
				{
					if (this._SS_Sery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._SeriesID = value;
					this.SendPropertyChanged("SeriesID");
					this.OnSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetID", DbType="Int NOT NULL")]
		public int FleetID
		{
			get
			{
				return this._FleetID;
			}
			set
			{
				if ((this._FleetID != value))
				{
					if (this._SS_Fleet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetIDChanging(value);
					this.SendPropertyChanging();
					this._FleetID = value;
					this.SendPropertyChanged("FleetID");
					this.OnFleetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceNumber", DbType="Int")]
		public System.Nullable<int> RaceNumber
		{
			get
			{
				return this._RaceNumber;
			}
			set
			{
				if ((this._RaceNumber != value))
				{
					this.OnRaceNumberChanging(value);
					this.SendPropertyChanging();
					this._RaceNumber = value;
					this.SendPropertyChanged("RaceNumber");
					this.OnRaceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="Int")]
		public System.Nullable<int> Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftToNext", DbType="Bit NOT NULL")]
		public bool ShiftToNext
		{
			get
			{
				return this._ShiftToNext;
			}
			set
			{
				if ((this._ShiftToNext != value))
				{
					this.OnShiftToNextChanging(value);
					this.SendPropertyChanging();
					this._ShiftToNext = value;
					this.SendPropertyChanged("ShiftToNext");
					this.OnShiftToNextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._SS_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BestSeason", DbType="Bit NOT NULL")]
		public bool BestSeason
		{
			get
			{
				return this._BestSeason;
			}
			set
			{
				if ((this._BestSeason != value))
				{
					this.OnBestSeasonChanging(value);
					this.SendPropertyChanging();
					this._BestSeason = value;
					this.SendPropertyChanged("BestSeason");
					this.OnBestSeasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Fleet_SS_Trophy", Storage="_SS_Fleet", ThisKey="FleetID", OtherKey="FleetID", IsForeignKey=true)]
		public SS_Fleet SS_Fleet
		{
			get
			{
				return this._SS_Fleet.Entity;
			}
			set
			{
				SS_Fleet previousValue = this._SS_Fleet.Entity;
				if (((previousValue != value) 
							|| (this._SS_Fleet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Fleet.Entity = null;
						previousValue.SS_Trophies.Remove(this);
					}
					this._SS_Fleet.Entity = value;
					if ((value != null))
					{
						value.SS_Trophies.Add(this);
						this._FleetID = value.FleetID;
					}
					else
					{
						this._FleetID = default(int);
					}
					this.SendPropertyChanged("SS_Fleet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Sery_SS_Trophy", Storage="_SS_Sery", ThisKey="SeriesID", OtherKey="SeriesID", IsForeignKey=true)]
		public SS_Sery SS_Sery
		{
			get
			{
				return this._SS_Sery.Entity;
			}
			set
			{
				SS_Sery previousValue = this._SS_Sery.Entity;
				if (((previousValue != value) 
							|| (this._SS_Sery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Sery.Entity = null;
						previousValue.SS_Trophies.Remove(this);
					}
					this._SS_Sery.Entity = value;
					if ((value != null))
					{
						value.SS_Trophies.Add(this);
						this._SeriesID = value.SeriesID;
					}
					else
					{
						this._SeriesID = default(int);
					}
					this.SendPropertyChanged("SS_Sery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_Trophy", Storage="_SS_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public SS_Season SS_Season
		{
			get
			{
				return this._SS_Season.Entity;
			}
			set
			{
				SS_Season previousValue = this._SS_Season.Entity;
				if (((previousValue != value) 
							|| (this._SS_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Season.Entity = null;
						previousValue.SS_Trophies.Remove(this);
					}
					this._SS_Season.Entity = value;
					if ((value != null))
					{
						value.SS_Trophies.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("SS_Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Time")]
	public partial class SS_Time : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeID;
		
		private string _TimeStr;
		
		private int _SortOrder;
		
		private int _NextTimeOrder;
		
		private bool _IsBackToBackSlot;
		
		private string _DisplayTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeIDChanging(int value);
    partial void OnTimeIDChanged();
    partial void OnTimeStrChanging(string value);
    partial void OnTimeStrChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnNextTimeOrderChanging(int value);
    partial void OnNextTimeOrderChanged();
    partial void OnIsBackToBackSlotChanging(bool value);
    partial void OnIsBackToBackSlotChanged();
    partial void OnDisplayTimeChanging(string value);
    partial void OnDisplayTimeChanged();
    #endregion
		
		public SS_Time()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimeID
		{
			get
			{
				return this._TimeID;
			}
			set
			{
				if ((this._TimeID != value))
				{
					this.OnTimeIDChanging(value);
					this.SendPropertyChanging();
					this._TimeID = value;
					this.SendPropertyChanged("TimeID");
					this.OnTimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStr", DbType="NVarChar(8) NOT NULL", CanBeNull=false)]
		public string TimeStr
		{
			get
			{
				return this._TimeStr;
			}
			set
			{
				if ((this._TimeStr != value))
				{
					this.OnTimeStrChanging(value);
					this.SendPropertyChanging();
					this._TimeStr = value;
					this.SendPropertyChanged("TimeStr");
					this.OnTimeStrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextTimeOrder", DbType="Int NOT NULL")]
		public int NextTimeOrder
		{
			get
			{
				return this._NextTimeOrder;
			}
			set
			{
				if ((this._NextTimeOrder != value))
				{
					this.OnNextTimeOrderChanging(value);
					this.SendPropertyChanging();
					this._NextTimeOrder = value;
					this.SendPropertyChanged("NextTimeOrder");
					this.OnNextTimeOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBackToBackSlot", DbType="Bit NOT NULL")]
		public bool IsBackToBackSlot
		{
			get
			{
				return this._IsBackToBackSlot;
			}
			set
			{
				if ((this._IsBackToBackSlot != value))
				{
					this.OnIsBackToBackSlotChanging(value);
					this.SendPropertyChanging();
					this._IsBackToBackSlot = value;
					this.SendPropertyChanged("IsBackToBackSlot");
					this.OnIsBackToBackSlotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayTime", DbType="NVarChar(20)")]
		public string DisplayTime
		{
			get
			{
				return this._DisplayTime;
			}
			set
			{
				if ((this._DisplayTime != value))
				{
					this.OnDisplayTimeChanging(value);
					this.SendPropertyChanging();
					this._DisplayTime = value;
					this.SendPropertyChanged("DisplayTime");
					this.OnDisplayTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Season")]
	public partial class SS_Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeasonID;
		
		private string _SeasonName;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private System.Nullable<bool> _IsActive;
		
		private bool _LockResults;
		
		private EntitySet<SS_BoatOwner> _SS_BoatOwners;
		
		private EntitySet<SS_FleetSery> _SS_FleetSeries;
		
		private EntitySet<SS_Result> _SS_Results;
		
		private EntitySet<SS_ResultSummary> _SS_ResultSummaries;
		
		private EntitySet<SS_Trophy> _SS_Trophies;
		
		private EntitySet<SS_Race> _SS_Races;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnSeasonNameChanging(string value);
    partial void OnSeasonNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnLockResultsChanging(bool value);
    partial void OnLockResultsChanged();
    #endregion
		
		public SS_Season()
		{
			this._SS_BoatOwners = new EntitySet<SS_BoatOwner>(new Action<SS_BoatOwner>(this.attach_SS_BoatOwners), new Action<SS_BoatOwner>(this.detach_SS_BoatOwners));
			this._SS_FleetSeries = new EntitySet<SS_FleetSery>(new Action<SS_FleetSery>(this.attach_SS_FleetSeries), new Action<SS_FleetSery>(this.detach_SS_FleetSeries));
			this._SS_Results = new EntitySet<SS_Result>(new Action<SS_Result>(this.attach_SS_Results), new Action<SS_Result>(this.detach_SS_Results));
			this._SS_ResultSummaries = new EntitySet<SS_ResultSummary>(new Action<SS_ResultSummary>(this.attach_SS_ResultSummaries), new Action<SS_ResultSummary>(this.detach_SS_ResultSummaries));
			this._SS_Trophies = new EntitySet<SS_Trophy>(new Action<SS_Trophy>(this.attach_SS_Trophies), new Action<SS_Trophy>(this.detach_SS_Trophies));
			this._SS_Races = new EntitySet<SS_Race>(new Action<SS_Race>(this.attach_SS_Races), new Action<SS_Race>(this.detach_SS_Races));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonName", DbType="NVarChar(50)")]
		public string SeasonName
		{
			get
			{
				return this._SeasonName;
			}
			set
			{
				if ((this._SeasonName != value))
				{
					this.OnSeasonNameChanging(value);
					this.SendPropertyChanging();
					this._SeasonName = value;
					this.SendPropertyChanged("SeasonName");
					this.OnSeasonNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockResults", DbType="Bit NOT NULL")]
		public bool LockResults
		{
			get
			{
				return this._LockResults;
			}
			set
			{
				if ((this._LockResults != value))
				{
					this.OnLockResultsChanging(value);
					this.SendPropertyChanging();
					this._LockResults = value;
					this.SendPropertyChanged("LockResults");
					this.OnLockResultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_BoatOwner", Storage="_SS_BoatOwners", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<SS_BoatOwner> SS_BoatOwners
		{
			get
			{
				return this._SS_BoatOwners;
			}
			set
			{
				this._SS_BoatOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_FleetSery", Storage="_SS_FleetSeries", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<SS_FleetSery> SS_FleetSeries
		{
			get
			{
				return this._SS_FleetSeries;
			}
			set
			{
				this._SS_FleetSeries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_Result", Storage="_SS_Results", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<SS_Result> SS_Results
		{
			get
			{
				return this._SS_Results;
			}
			set
			{
				this._SS_Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_ResultSummary", Storage="_SS_ResultSummaries", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<SS_ResultSummary> SS_ResultSummaries
		{
			get
			{
				return this._SS_ResultSummaries;
			}
			set
			{
				this._SS_ResultSummaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_Trophy", Storage="_SS_Trophies", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<SS_Trophy> SS_Trophies
		{
			get
			{
				return this._SS_Trophies;
			}
			set
			{
				this._SS_Trophies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_Race", Storage="_SS_Races", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<SS_Race> SS_Races
		{
			get
			{
				return this._SS_Races;
			}
			set
			{
				this._SS_Races.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_BoatOwners(SS_BoatOwner entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = this;
		}
		
		private void detach_SS_BoatOwners(SS_BoatOwner entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = null;
		}
		
		private void attach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = this;
		}
		
		private void detach_SS_FleetSeries(SS_FleetSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = null;
		}
		
		private void attach_SS_Results(SS_Result entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = this;
		}
		
		private void detach_SS_Results(SS_Result entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = null;
		}
		
		private void attach_SS_ResultSummaries(SS_ResultSummary entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = this;
		}
		
		private void detach_SS_ResultSummaries(SS_ResultSummary entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = null;
		}
		
		private void attach_SS_Trophies(SS_Trophy entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = this;
		}
		
		private void detach_SS_Trophies(SS_Trophy entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = null;
		}
		
		private void attach_SS_Races(SS_Race entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = this;
		}
		
		private void detach_SS_Races(SS_Race entity)
		{
			this.SendPropertyChanging();
			entity.SS_Season = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_RaceSeries")]
	public partial class SS_RaceSery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceSeriesID;
		
		private int _SeasonID;
		
		private int _RaceID;
		
		private int _FleetSeriesID;
		
		private int _RaceNumber;
		
		private int _ScorePointsFactor;
		
		private bool _IsScoreExcludable;
		
		private EntityRef<SS_FleetSery> _SS_FleetSery;
		
		private EntityRef<SS_Race> _SS_Race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceSeriesIDChanging(int value);
    partial void OnRaceSeriesIDChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnFleetSeriesIDChanging(int value);
    partial void OnFleetSeriesIDChanged();
    partial void OnRaceNumberChanging(int value);
    partial void OnRaceNumberChanged();
    partial void OnScorePointsFactorChanging(int value);
    partial void OnScorePointsFactorChanged();
    partial void OnIsScoreExcludableChanging(bool value);
    partial void OnIsScoreExcludableChanged();
    #endregion
		
		public SS_RaceSery()
		{
			this._SS_FleetSery = default(EntityRef<SS_FleetSery>);
			this._SS_Race = default(EntityRef<SS_Race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceSeriesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaceSeriesID
		{
			get
			{
				return this._RaceSeriesID;
			}
			set
			{
				if ((this._RaceSeriesID != value))
				{
					this.OnRaceSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._RaceSeriesID = value;
					this.SendPropertyChanged("RaceSeriesID");
					this.OnRaceSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._SS_Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetSeriesID", DbType="Int NOT NULL")]
		public int FleetSeriesID
		{
			get
			{
				return this._FleetSeriesID;
			}
			set
			{
				if ((this._FleetSeriesID != value))
				{
					if (this._SS_FleetSery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._FleetSeriesID = value;
					this.SendPropertyChanged("FleetSeriesID");
					this.OnFleetSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceNumber", DbType="Int NOT NULL")]
		public int RaceNumber
		{
			get
			{
				return this._RaceNumber;
			}
			set
			{
				if ((this._RaceNumber != value))
				{
					this.OnRaceNumberChanging(value);
					this.SendPropertyChanging();
					this._RaceNumber = value;
					this.SendPropertyChanged("RaceNumber");
					this.OnRaceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScorePointsFactor", DbType="Int NOT NULL")]
		public int ScorePointsFactor
		{
			get
			{
				return this._ScorePointsFactor;
			}
			set
			{
				if ((this._ScorePointsFactor != value))
				{
					this.OnScorePointsFactorChanging(value);
					this.SendPropertyChanging();
					this._ScorePointsFactor = value;
					this.SendPropertyChanged("ScorePointsFactor");
					this.OnScorePointsFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsScoreExcludable", DbType="Bit NOT NULL")]
		public bool IsScoreExcludable
		{
			get
			{
				return this._IsScoreExcludable;
			}
			set
			{
				if ((this._IsScoreExcludable != value))
				{
					this.OnIsScoreExcludableChanging(value);
					this.SendPropertyChanging();
					this._IsScoreExcludable = value;
					this.SendPropertyChanged("IsScoreExcludable");
					this.OnIsScoreExcludableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_FleetSery_SS_RaceSery", Storage="_SS_FleetSery", ThisKey="FleetSeriesID", OtherKey="FleetSeriesID", IsForeignKey=true)]
		public SS_FleetSery SS_FleetSery
		{
			get
			{
				return this._SS_FleetSery.Entity;
			}
			set
			{
				SS_FleetSery previousValue = this._SS_FleetSery.Entity;
				if (((previousValue != value) 
							|| (this._SS_FleetSery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_FleetSery.Entity = null;
						previousValue.SS_RaceSeries.Remove(this);
					}
					this._SS_FleetSery.Entity = value;
					if ((value != null))
					{
						value.SS_RaceSeries.Add(this);
						this._FleetSeriesID = value.FleetSeriesID;
					}
					else
					{
						this._FleetSeriesID = default(int);
					}
					this.SendPropertyChanged("SS_FleetSery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Race_SS_RaceSery", Storage="_SS_Race", ThisKey="RaceID", OtherKey="RaceID", IsForeignKey=true)]
		public SS_Race SS_Race
		{
			get
			{
				return this._SS_Race.Entity;
			}
			set
			{
				SS_Race previousValue = this._SS_Race.Entity;
				if (((previousValue != value) 
							|| (this._SS_Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Race.Entity = null;
						previousValue.SS_RaceSeries.Remove(this);
					}
					this._SS_Race.Entity = value;
					if ((value != null))
					{
						value.SS_RaceSeries.Add(this);
						this._RaceID = value.RaceID;
					}
					else
					{
						this._RaceID = default(int);
					}
					this.SendPropertyChanged("SS_Race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SS_Race")]
	public partial class SS_Race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceID;
		
		private int _SeasonID;
		
		private System.DateTime _FirstWarningDate;
		
		private System.Nullable<System.DateTime> _FirstWarningDateOnly;
		
		private System.Nullable<System.DateTime> _ActualDate;
		
		private System.Nullable<System.DateTime> _DockedDate;
		
		private string _PRO;
		
		private string _AssistPRO;
		
		private string _Helper;
		
		private string _WindDirection;
		
		private string _CourseChange;
		
		private string _WindSpeed;
		
		private string _WindUnits;
		
		private string _Protests;
		
		private string _Comments;
		
		private string _FirstWarningTimeOnly;
		
		private EntitySet<SS_RaceFleet> _SS_RaceFleets;
		
		private EntitySet<SS_Score> _SS_Scores;
		
		private EntitySet<SS_RaceSery> _SS_RaceSeries;
		
		private EntityRef<SS_Season> _SS_Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnFirstWarningDateChanging(System.DateTime value);
    partial void OnFirstWarningDateChanged();
    partial void OnFirstWarningDateOnlyChanging(System.Nullable<System.DateTime> value);
    partial void OnFirstWarningDateOnlyChanged();
    partial void OnActualDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualDateChanged();
    partial void OnDockedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDockedDateChanged();
    partial void OnPROChanging(string value);
    partial void OnPROChanged();
    partial void OnAssistPROChanging(string value);
    partial void OnAssistPROChanged();
    partial void OnHelperChanging(string value);
    partial void OnHelperChanged();
    partial void OnWindDirectionChanging(string value);
    partial void OnWindDirectionChanged();
    partial void OnCourseChangeChanging(string value);
    partial void OnCourseChangeChanged();
    partial void OnWindSpeedChanging(string value);
    partial void OnWindSpeedChanged();
    partial void OnWindUnitsChanging(string value);
    partial void OnWindUnitsChanged();
    partial void OnProtestsChanging(string value);
    partial void OnProtestsChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnFirstWarningTimeOnlyChanging(string value);
    partial void OnFirstWarningTimeOnlyChanged();
    #endregion
		
		public SS_Race()
		{
			this._SS_RaceFleets = new EntitySet<SS_RaceFleet>(new Action<SS_RaceFleet>(this.attach_SS_RaceFleets), new Action<SS_RaceFleet>(this.detach_SS_RaceFleets));
			this._SS_Scores = new EntitySet<SS_Score>(new Action<SS_Score>(this.attach_SS_Scores), new Action<SS_Score>(this.detach_SS_Scores));
			this._SS_RaceSeries = new EntitySet<SS_RaceSery>(new Action<SS_RaceSery>(this.attach_SS_RaceSeries), new Action<SS_RaceSery>(this.detach_SS_RaceSeries));
			this._SS_Season = default(EntityRef<SS_Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._SS_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstWarningDate", DbType="DateTime NOT NULL")]
		public System.DateTime FirstWarningDate
		{
			get
			{
				return this._FirstWarningDate;
			}
			set
			{
				if ((this._FirstWarningDate != value))
				{
					this.OnFirstWarningDateChanging(value);
					this.SendPropertyChanging();
					this._FirstWarningDate = value;
					this.SendPropertyChanged("FirstWarningDate");
					this.OnFirstWarningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstWarningDateOnly", AutoSync=AutoSync.Always, DbType="Date", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FirstWarningDateOnly
		{
			get
			{
				return this._FirstWarningDateOnly;
			}
			set
			{
				if ((this._FirstWarningDateOnly != value))
				{
					this.OnFirstWarningDateOnlyChanging(value);
					this.SendPropertyChanging();
					this._FirstWarningDateOnly = value;
					this.SendPropertyChanged("FirstWarningDateOnly");
					this.OnFirstWarningDateOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualDate
		{
			get
			{
				return this._ActualDate;
			}
			set
			{
				if ((this._ActualDate != value))
				{
					this.OnActualDateChanging(value);
					this.SendPropertyChanging();
					this._ActualDate = value;
					this.SendPropertyChanged("ActualDate");
					this.OnActualDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DockedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DockedDate
		{
			get
			{
				return this._DockedDate;
			}
			set
			{
				if ((this._DockedDate != value))
				{
					this.OnDockedDateChanging(value);
					this.SendPropertyChanging();
					this._DockedDate = value;
					this.SendPropertyChanged("DockedDate");
					this.OnDockedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRO", DbType="NVarChar(50)")]
		public string PRO
		{
			get
			{
				return this._PRO;
			}
			set
			{
				if ((this._PRO != value))
				{
					this.OnPROChanging(value);
					this.SendPropertyChanging();
					this._PRO = value;
					this.SendPropertyChanged("PRO");
					this.OnPROChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssistPRO", DbType="NVarChar(50)")]
		public string AssistPRO
		{
			get
			{
				return this._AssistPRO;
			}
			set
			{
				if ((this._AssistPRO != value))
				{
					this.OnAssistPROChanging(value);
					this.SendPropertyChanging();
					this._AssistPRO = value;
					this.SendPropertyChanged("AssistPRO");
					this.OnAssistPROChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Helper", DbType="NVarChar(50)")]
		public string Helper
		{
			get
			{
				return this._Helper;
			}
			set
			{
				if ((this._Helper != value))
				{
					this.OnHelperChanging(value);
					this.SendPropertyChanging();
					this._Helper = value;
					this.SendPropertyChanged("Helper");
					this.OnHelperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindDirection", DbType="NVarChar(15)")]
		public string WindDirection
		{
			get
			{
				return this._WindDirection;
			}
			set
			{
				if ((this._WindDirection != value))
				{
					this.OnWindDirectionChanging(value);
					this.SendPropertyChanging();
					this._WindDirection = value;
					this.SendPropertyChanged("WindDirection");
					this.OnWindDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseChange", DbType="NVarChar(15)")]
		public string CourseChange
		{
			get
			{
				return this._CourseChange;
			}
			set
			{
				if ((this._CourseChange != value))
				{
					this.OnCourseChangeChanging(value);
					this.SendPropertyChanging();
					this._CourseChange = value;
					this.SendPropertyChanged("CourseChange");
					this.OnCourseChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindSpeed", DbType="NVarChar(15)")]
		public string WindSpeed
		{
			get
			{
				return this._WindSpeed;
			}
			set
			{
				if ((this._WindSpeed != value))
				{
					this.OnWindSpeedChanging(value);
					this.SendPropertyChanging();
					this._WindSpeed = value;
					this.SendPropertyChanged("WindSpeed");
					this.OnWindSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindUnits", DbType="NVarChar(10)")]
		public string WindUnits
		{
			get
			{
				return this._WindUnits;
			}
			set
			{
				if ((this._WindUnits != value))
				{
					this.OnWindUnitsChanging(value);
					this.SendPropertyChanging();
					this._WindUnits = value;
					this.SendPropertyChanged("WindUnits");
					this.OnWindUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Protests", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Protests
		{
			get
			{
				return this._Protests;
			}
			set
			{
				if ((this._Protests != value))
				{
					this.OnProtestsChanging(value);
					this.SendPropertyChanging();
					this._Protests = value;
					this.SendPropertyChanged("Protests");
					this.OnProtestsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstWarningTimeOnly", AutoSync=AutoSync.Always, DbType="VarChar(7)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string FirstWarningTimeOnly
		{
			get
			{
				return this._FirstWarningTimeOnly;
			}
			set
			{
				if ((this._FirstWarningTimeOnly != value))
				{
					this.OnFirstWarningTimeOnlyChanging(value);
					this.SendPropertyChanging();
					this._FirstWarningTimeOnly = value;
					this.SendPropertyChanged("FirstWarningTimeOnly");
					this.OnFirstWarningTimeOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Race_SS_RaceFleet", Storage="_SS_RaceFleets", ThisKey="RaceID", OtherKey="RaceID")]
		public EntitySet<SS_RaceFleet> SS_RaceFleets
		{
			get
			{
				return this._SS_RaceFleets;
			}
			set
			{
				this._SS_RaceFleets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Race_SS_Score", Storage="_SS_Scores", ThisKey="RaceID", OtherKey="RaceID")]
		public EntitySet<SS_Score> SS_Scores
		{
			get
			{
				return this._SS_Scores;
			}
			set
			{
				this._SS_Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Race_SS_RaceSery", Storage="_SS_RaceSeries", ThisKey="RaceID", OtherKey="RaceID")]
		public EntitySet<SS_RaceSery> SS_RaceSeries
		{
			get
			{
				return this._SS_RaceSeries;
			}
			set
			{
				this._SS_RaceSeries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SS_Season_SS_Race", Storage="_SS_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public SS_Season SS_Season
		{
			get
			{
				return this._SS_Season.Entity;
			}
			set
			{
				SS_Season previousValue = this._SS_Season.Entity;
				if (((previousValue != value) 
							|| (this._SS_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SS_Season.Entity = null;
						previousValue.SS_Races.Remove(this);
					}
					this._SS_Season.Entity = value;
					if ((value != null))
					{
						value.SS_Races.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("SS_Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SS_RaceFleets(SS_RaceFleet entity)
		{
			this.SendPropertyChanging();
			entity.SS_Race = this;
		}
		
		private void detach_SS_RaceFleets(SS_RaceFleet entity)
		{
			this.SendPropertyChanging();
			entity.SS_Race = null;
		}
		
		private void attach_SS_Scores(SS_Score entity)
		{
			this.SendPropertyChanging();
			entity.SS_Race = this;
		}
		
		private void detach_SS_Scores(SS_Score entity)
		{
			this.SendPropertyChanging();
			entity.SS_Race = null;
		}
		
		private void attach_SS_RaceSeries(SS_RaceSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Race = this;
		}
		
		private void detach_SS_RaceSeries(SS_RaceSery entity)
		{
			this.SendPropertyChanging();
			entity.SS_Race = null;
		}
	}
}
#pragma warning restore 1591
