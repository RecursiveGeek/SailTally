using System.Collections.Generic;

namespace SailTally.Classes
{
    public class Race
    {
        #region Properties
        public int FleetId { get; set; }
        public int SeriesId { get; set; }
        public int SeasonId { get; set; }
        public int? RaceNumber { get; set; }
        public int? Place { get; set; }
        #endregion

        #region Constructors
        public Race(int fleetId, int seriesId, int seasonId, int? raceNumber, int? place)
        {
            FleetId = fleetId;
            SeriesId = seriesId;
            SeasonId = seasonId;
            RaceNumber = raceNumber;
            Place = place;
        }
        #endregion

        #region Methods
        public override bool Equals(object obj)
        {
            if (!(obj is Race))
            {
                return false;
            }

            var race = obj as Race;
            return (FleetId == race.FleetId && SeriesId == race.SeriesId && SeasonId == race.SeasonId && RaceNumber == race.RaceNumber && Place == race.Place);
        }

        // Generated by R#
        public override int GetHashCode()
        {
            var hashCode = 785467465;
            hashCode = hashCode * -1521134295 + FleetId.GetHashCode();
            hashCode = hashCode * -1521134295 + SeriesId.GetHashCode();
            hashCode = hashCode * -1521134295 + SeasonId.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<int?>.Default.GetHashCode(RaceNumber);
            hashCode = hashCode * -1521134295 + EqualityComparer<int?>.Default.GetHashCode(Place);
            return hashCode;
        }
        #endregion

        #region Functions
        public static bool operator ==(Race r1, Race r2)
        {
            return r1.Equals(r2);
        }

        public static bool operator !=(Race r1, Race r2)
        {
            return !(r1 == r2);
        }
        #endregion
    }
}